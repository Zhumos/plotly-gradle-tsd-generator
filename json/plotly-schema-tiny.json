{
 "defs": {
  "valObjects": {
   "data_array": {
    "description": "An {array} of data. The value MUST be an {array}, or we ignore it.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt"
    ]
   },
   "enumerated": {
    "description": "Enumerated value type. The available values are listed in `values`.",
    "requiredOpts": [
     "values"
    ],
    "otherOpts": [
     "dflt",
     "coerceNumber",
     "arrayOk"
    ]
   },
   "boolean": {
    "description": "A boolean (true/false) value.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt"
    ]
   },
   "number": {
    "description": "A number or a numeric value (e.g. a number inside a string). When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt",
     "min",
     "max",
     "arrayOk"
    ]
   },
   "integer": {
    "description": "An integer or an integer inside a string. When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt",
     "min",
     "max"
    ]
   },
   "string": {
    "description": "A string value. Numbers are converted to strings except for attributes with `strict` set to true.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt",
     "noBlank",
     "strict",
     "arrayOk",
     "values"
    ]
   },
   "color": {
    "description": "A string describing color. Supported formats: - hex (e.g. '#d3d3d3') - rgb (e.g. 'rgb(255, 0, 0)') - rgba (e.g. 'rgb(255, 0, 0, 0.5)') - hsl (e.g. 'hsl(0, 100%, 50%)') - hsv (e.g. 'hsv(0, 100%, 100%)') - named colors (full list: http://www.w3.org/TR/css3-color/#svg-color)",
    "requiredOpts": [],
    "otherOpts": [
     "dflt",
     "arrayOk"
    ]
   },
   "colorscale": {
    "description": "A Plotly colorscale either picked by a name: (any of Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis ) customized as an {array} of 2-element {arrays} where the first element is the normalized color level value (starting at *0* and ending at *1*), and the second item is a valid color string.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt"
    ]
   },
   "angle": {
    "description": "A number (in degree) between -180 and 180.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt"
    ]
   },
   "subplotid": {
    "description": "An id string of a subplot type (given by dflt), optionally followed by an integer >1. e.g. if dflt='geo', we can have 'geo', 'geo2', 'geo3', ...",
    "requiredOpts": [
     "dflt"
    ],
    "otherOpts": []
   },
   "flaglist": {
    "description": "A string representing a combination of flags (order does not matter here). Combine any of the available `flags` with *+*. (e.g. ('lines+markers')). Values in `extras` cannot be combined.",
    "requiredOpts": [
     "flags"
    ],
    "otherOpts": [
     "dflt",
     "extras"
    ]
   },
   "any": {
    "description": "Any type.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt",
     "values",
     "arrayOk"
    ]
   },
   "info_array": {
    "description": "An {array} of plot information.",
    "requiredOpts": [
     "items"
    ],
    "otherOpts": [
     "dflt",
     "freeLength"
    ]
   }
  },
  "metaKeys": [
   "_isSubplotObj",
   "_isLinkedToArray",
   "_deprecated",
   "description",
   "role"
  ]
 },
 "traces": {
  "scattergl": {
   "meta": {
    "description": "The data visualized as scatter point or lines is set in `x` and `y` using the WebGl plotting engine. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to a numerical arrays."
   },
   "attributes": {
    "type": "scattergl",
    "visible": {
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ],
     "role": "info",
     "dflt": true,
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
    },
    "grid": {
      "editType": "plot",
      "role": "object",
      "subplots": {
        "valType": "info_array",
        "freeLength": true,
        "dimensions": 2,
        "items": {
            "valType": "enumerated",
            "values": [
                "/^x([2-9]|[1-9][0-9]+)?y([2-9]|[1-9][0-9]+)?$/",
                ""
            ],
            "editType": "plot"
        },
        "role": "info",
        "editType": "plot",
        "description": "Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like *xy* or *x3y2*, or ** to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute."
      },
      "x": {
        "valType": "info_array",
        "role": "info",
        "editType": "plot",
        "items": [
            {
                "valType": "number",
                "min": 0,
                "max": 1,
                "editType": "plot"
            },
            {
                "valType": "number",
                "min": 0,
                "max": 1,
                "editType": "plot"
            }
        ],
        "dflt": [
            0,
            1
        ],
        "description": "Sets the horizontal domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges."
      },
    },
    "legendgroup": {
     "valType": "string",
     "role": "info",
     "dflt": "",
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
    },
    "opacity": {
     "valType": "number",
     "role": "style",
     "min": 0,
     "max": 1,
     "dflt": 1,
     "description": "Sets the opacity of the trace."
    },
    "name": {
     "valType": "string",
     "role": "info",
     "description": "Sets the trace name. The trace name appear as the legend item and on hover."
    },
    "uid": {
     "valType": "string",
     "role": "info",
     "dflt": ""
    },
    "hoverinfo": {
     "valType": "flaglist",
     "role": "info",
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "dflt": "all",
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired."
    },
    "x": {
     "valType": "data_array",
     "description": "Sets the x coordinates.",
     "role": "data"
    },
    "y": {
     "valType": "data_array",
     "description": "Sets the y coordinates.",
     "role": "data"
    },
    "text": {
     "valType": "string",
     "role": "info",
     "dflt": "",
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates."
    },
    "mode": {
     "valType": "flaglist",
     "flags": [
      "lines",
      "markers"
     ],
     "extras": [
      "none"
     ],
     "role": "info",
     "description": "Determines the drawing mode for this scatter trace."
    },
    "line": {
     "color": {
      "valType": "color",
      "role": "style",
      "description": "Sets the line color."
     },
     "width": {
      "valType": "number",
      "min": 0,
      "dflt": 2,
      "role": "style",
      "description": "Sets the line width (in px)."
     },
     "dash": {
      "valType": "enumerated",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ],
      "dflt": "solid",
      "role": "style",
      "description": "Sets the style of the lines."
     },
     "role": "object"
    },
    "fillcolor": {
     "valType": "color",
     "role": "style",
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."
    },
    "xaxis": {
     "valType": "subplotid",
     "role": "info",
     "dflt": "x",
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
    },
    "yaxis": {
     "valType": "subplotid",
     "role": "info",
     "dflt": "y",
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
    }
   }
  },
  },
 "layout": {
  "layoutAttributes": {
   "font": {
    "family": {
     "valType": "string",
     "role": "style",
     "noBlank": true,
     "strict": true,
     "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
     "dflt": "\"Open Sans\", verdana, arial, sans-serif"
    },
    "size": {
     "valType": "number",
     "role": "style",
     "min": 1,
     "dflt": 12
    },
    "color": {
     "valType": "color",
     "role": "style",
     "dflt": "#444"
    },
    "description": "Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.",
    "role": "object"
   },
   "title": {
    "valType": "string",
    "role": "info",
    "dflt": "Click to enter Plot title",
    "description": "Sets the plot's title."
   },
   "titlefont": {
    "family": {
     "valType": "string",
     "role": "style",
     "noBlank": true,
     "strict": true,
     "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
    },
    "size": {
     "valType": "number",
     "role": "style",
     "min": 1
    },
    "color": {
     "valType": "color",
     "role": "style"
    },
    "description": "Sets the title font.",
    "role": "object"
   },
   "autosize": {
    "valType": "boolean",
    "role": "info",
    "dflt": false,
    "description": "Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot."
   },
   "width": {
    "valType": "number",
    "role": "info",
    "min": 10,
    "dflt": 700,
    "description": "Sets the plot's width (in px)."
   },
   "height": {
    "valType": "number",
    "role": "info",
    "min": 10,
    "dflt": 450,
    "description": "Sets the plot's height (in px)."
   },
   "margin": {
    "l": {
     "valType": "number",
     "role": "info",
     "min": 0,
     "dflt": 80,
     "description": "Sets the left margin (in px)."
    },
    "r": {
     "valType": "number",
     "role": "info",
     "min": 0,
     "dflt": 80,
     "description": "Sets the right margin (in px)."
    },
    "t": {
     "valType": "number",
     "role": "info",
     "min": 0,
     "dflt": 100,
     "description": "Sets the top margin (in px)."
    },
    "b": {
     "valType": "number",
     "role": "info",
     "min": 0,
     "dflt": 80,
     "description": "Sets the bottom margin (in px)."
    },
    "pad": {
     "valType": "number",
     "role": "info",
     "min": 0,
     "dflt": 0,
     "description": "Sets the amount of padding (in px) between the plotting area and the axis lines"
    },
    "autoexpand": {
     "valType": "boolean",
     "role": "info",
     "dflt": true
    },
    "role": "object"
   },
   "annotations": {
        "items": {
          "annotation": {
            "visible": {
              "valType": "boolean",
              "role": "info",
              "dflt": true,
              "description": "Determines whether or not this annotation is visible."
            },
            "text": {
              "valType": "string",
              "role": "info",
              "description": "Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub> <span> are also supported."
            },
            "textangle": {
              "valType": "angle",
              "dflt": 0,
              "role": "style",
              "description": "Sets the angle at which the `text` is drawn with respect to the horizontal."
            },
            "showarrow": {
              "valType": "boolean",
              "dflt": true,
              "role": "style",
              "description": "Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided."
            },
            "xref": {
              "valType": "enumerated",
              "values": [
                "paper",
                "/^x([2-9]|[1-9][0-9]+)?$/"
              ],
              "role": "info",
              "description": "Sets the annotation's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where 0 (1) corresponds to the left (right) side."
            },
            "x": {
              "valType": "any",
              "role": "info",
              "description": "Sets the annotation's x position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "xanchor": {
              "valType": "enumerated",
              "values": [
                "auto",
                "left",
                "center",
                "right"
              ],
              "dflt": "auto",
              "role": "info",
              "description": "Sets the text box's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side."
            },
            "captureevents": {
              "valType": "boolean",
              "role": "info",
              "description": "Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is *false* unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`."
            },
            "_deprecated": {
              "ref": {
                "valType": "string",
                "role": "info",
                "description": "Obsolete. Set `xref` and `yref` separately instead."
              }
            },
            "role": "object"
          }
        },
        "role": "object"
      },
      
   "calendar": {
    "valType": "enumerated",
    "values": [
     "gregorian",
     "chinese",
     "coptic",
     "discworld",
     "ethiopian",
     "hebrew",
     "islamic",
     "julian",
     "mayan",
     "nanakshahi",
     "nepali",
     "persian",
     "jalali",
     "taiwan",
     "thai",
     "ummalqura"
    ],
    "role": "info",
    "dflt": "gregorian",
    "description": "Sets the default calendar system to use for interpreting and displaying dates throughout the plot."
   }
  }
 },
 
}