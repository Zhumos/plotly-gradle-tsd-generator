{
 "defs": {
  "valObjects": {
   "data_array": {
    "description": "An {array} of data. The value MUST be an {array}, or we ignore it.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt"
    ]
   },
   "enumerated": {
    "description": "Enumerated value type. The available values are listed in `values`.",
    "requiredOpts": [
     "values"
    ],
    "otherOpts": [
     "dflt",
     "coerceNumber",
     "arrayOk"
    ]
   },
   "boolean": {
    "description": "A boolean (true/false) value.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt"
    ]
   },
   "number": {
    "description": "A number or a numeric value (e.g. a number inside a string). When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt",
     "min",
     "max",
     "arrayOk"
    ]
   },
   "integer": {
    "description": "An integer or an integer inside a string. When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt",
     "min",
     "max"
    ]
   },
   "string": {
    "description": "A string value. Numbers are converted to strings except for attributes with `strict` set to true.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt",
     "noBlank",
     "strict",
     "arrayOk",
     "values"
    ]
   },
   "color": {
    "description": "A string describing color. Supported formats: - hex (e.g. '#d3d3d3') - rgb (e.g. 'rgb(255, 0, 0)') - rgba (e.g. 'rgb(255, 0, 0, 0.5)') - hsl (e.g. 'hsl(0, 100%, 50%)') - hsv (e.g. 'hsv(0, 100%, 100%)') - named colors (full list: http://www.w3.org/TR/css3-color/#svg-color)",
    "requiredOpts": [],
    "otherOpts": [
     "dflt",
     "arrayOk"
    ]
   },
   "colorscale": {
    "description": "A Plotly colorscale either picked by a name: (any of Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis ) customized as an {array} of 2-element {arrays} where the first element is the normalized color level value (starting at *0* and ending at *1*), and the second item is a valid color string.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt"
    ]
   },
   "angle": {
    "description": "A number (in degree) between -180 and 180.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt"
    ]
   },
   "subplotid": {
    "description": "An id string of a subplot type (given by dflt), optionally followed by an integer >1. e.g. if dflt='geo', we can have 'geo', 'geo2', 'geo3', ...",
    "requiredOpts": [
     "dflt"
    ],
    "otherOpts": []
   },
   "flaglist": {
    "description": "A string representing a combination of flags (order does not matter here). Combine any of the available `flags` with *+*. (e.g. ('lines+markers')). Values in `extras` cannot be combined.",
    "requiredOpts": [
     "flags"
    ],
    "otherOpts": [
     "dflt",
     "extras"
    ]
   },
   "any": {
    "description": "Any type.",
    "requiredOpts": [],
    "otherOpts": [
     "dflt",
     "values",
     "arrayOk"
    ]
   },
   "info_array": {
    "description": "An {array} of plot information.",
    "requiredOpts": [
     "items"
    ],
    "otherOpts": [
     "dflt",
     "freeLength"
    ]
   }
  },
  "metaKeys": [
   "_isSubplotObj",
   "_isLinkedToArray",
   "_deprecated",
   "description",
   "role"
  ]
 },
 "traces": {
  "scattergl": {
   "meta": {
    "description": "The data visualized as scatter point or lines is set in `x` and `y` using the WebGl plotting engine. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to a numerical arrays."
   },
   "attributes": {
    "type": "scattergl",
    "visible": {
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ],
     "role": "info",
     "dflt": true,
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
    },
    "showlegend": {
     "valType": "boolean",
     "role": "info",
     "dflt": true,
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
    },
    "legendgroup": {
     "valType": "string",
     "role": "info",
     "dflt": "",
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items."
    },
    "opacity": {
     "valType": "number",
     "role": "style",
     "min": 0,
     "max": 1,
     "dflt": 1,
     "description": "Sets the opacity of the trace."
    },
    "name": {
     "valType": "string",
     "role": "info",
     "description": "Sets the trace name. The trace name appear as the legend item and on hover."
    },
    "uid": {
     "valType": "string",
     "role": "info",
     "dflt": ""
    },
    "hoverinfo": {
     "valType": "flaglist",
     "role": "info",
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "dflt": "all",
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired."
    },
    "stream": {
     "token": {
      "valType": "string",
      "noBlank": true,
      "strict": true,
      "role": "info",
      "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details."
     },
     "maxpoints": {
      "valType": "number",
      "min": 0,
      "max": 10000,
      "dflt": 500,
      "role": "info",
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot."
     },
     "role": "object"
    },
    "x": {
     "valType": "data_array",
     "description": "Sets the x coordinates.",
     "role": "data"
    },
    "x0": {
     "valType": "any",
     "dflt": 0,
     "role": "info",
     "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step."
    },
    "dx": {
     "valType": "number",
     "dflt": 1,
     "role": "info",
     "description": "Sets the x coordinate step. See `x0` for more info."
    },
    "y": {
     "valType": "data_array",
     "description": "Sets the y coordinates.",
     "role": "data"
    },
    "y0": {
     "valType": "any",
     "dflt": 0,
     "role": "info",
     "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step."
    },
    "dy": {
     "valType": "number",
     "dflt": 1,
     "role": "info",
     "description": "Sets the y coordinate step. See `y0` for more info."
    },
    "text": {
     "valType": "string",
     "role": "info",
     "dflt": "",
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates."
    },
    "mode": {
     "valType": "flaglist",
     "flags": [
      "lines",
      "markers"
     ],
     "extras": [
      "none"
     ],
     "role": "info",
     "description": "Determines the drawing mode for this scatter trace."
    },
    "line": {
     "color": {
      "valType": "color",
      "role": "style",
      "description": "Sets the line color."
     },
     "width": {
      "valType": "number",
      "min": 0,
      "dflt": 2,
      "role": "style",
      "description": "Sets the line width (in px)."
     },
     "dash": {
      "valType": "enumerated",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ],
      "dflt": "solid",
      "role": "style",
      "description": "Sets the style of the lines."
     },
     "role": "object"
    },
    "marker": {
     "color": {
      "valType": "color",
      "arrayOk": true,
      "role": "style",
      "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."
     },
     "colorscale": {
      "valType": "colorscale",
      "role": "style",
      "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"
     },
     "cauto": {
      "valType": "boolean",
      "role": "info",
      "dflt": true,
      "description": "Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user."
     },
     "cmax": {
      "valType": "number",
      "role": "info",
      "dflt": null,
      "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well."
     },
     "cmin": {
      "valType": "number",
      "role": "info",
      "dflt": null,
      "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well."
     },
     "autocolorscale": {
      "valType": "boolean",
      "role": "style",
      "dflt": true,
      "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed."
     },
     "reversescale": {
      "valType": "boolean",
      "role": "style",
      "dflt": false,
      "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color)."
     },
     "symbol": {
      "valType": "enumerated",
      "values": [
       "circle",
       "circle-open",
       "square",
       "square-open",
       "diamond",
       "diamond-open",
       "cross",
       "x"
      ],
      "dflt": "circle",
      "arrayOk": true,
      "role": "style",
      "description": "Sets the marker symbol type."
     },
     "size": {
      "valType": "number",
      "min": 0,
      "dflt": 6,
      "arrayOk": true,
      "role": "style",
      "description": "Sets the marker size (in px)."
     },
     "sizeref": {
      "valType": "number",
      "dflt": 1,
      "role": "style",
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`."
     },
     "sizemin": {
      "valType": "number",
      "min": 0,
      "dflt": 0,
      "role": "style",
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points."
     },
     "sizemode": {
      "valType": "enumerated",
      "values": [
       "diameter",
       "area"
      ],
      "dflt": "diameter",
      "role": "info",
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels."
     },
     "opacity": {
      "valType": "number",
      "min": 0,
      "max": 1,
      "arrayOk": true,
      "role": "style",
      "description": "Sets the marker opacity."
     },
     "showscale": {
      "valType": "boolean",
      "role": "info",
      "dflt": false,
      "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed."
     },
     "colorbar": {
      "thicknessmode": {
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ],
       "role": "style",
       "dflt": "pixels",
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value."
      },
      "thickness": {
       "valType": "number",
       "role": "style",
       "min": 0,
       "dflt": 30,
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels."
      },
      "lenmode": {
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ],
       "role": "info",
       "dflt": "fraction",
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
      },
      "len": {
       "valType": "number",
       "min": 0,
       "dflt": 1,
       "role": "style",
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends."
      },
      "x": {
       "valType": "number",
       "dflt": 1.02,
       "min": -2,
       "max": 3,
       "role": "style",
       "description": "Sets the x position of the color bar (in plot fraction)."
      },
      "xanchor": {
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ],
       "dflt": "left",
       "role": "style",
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar."
      },
      "xpad": {
       "valType": "number",
       "role": "style",
       "min": 0,
       "dflt": 10,
       "description": "Sets the amount of padding (in px) along the x direction."
      },
      "y": {
       "valType": "number",
       "role": "style",
       "dflt": 0.5,
       "min": -2,
       "max": 3,
       "description": "Sets the y position of the color bar (in plot fraction)."
      },
      "yanchor": {
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ],
       "role": "style",
       "dflt": "middle",
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar."
      },
      "ypad": {
       "valType": "number",
       "role": "style",
       "min": 0,
       "dflt": 10,
       "description": "Sets the amount of padding (in px) along the y direction."
      },
      "outlinecolor": {
       "valType": "color",
       "dflt": "#444",
       "role": "style",
       "description": "Sets the axis line color."
      },
      "outlinewidth": {
       "valType": "number",
       "min": 0,
       "dflt": 1,
       "role": "style",
       "description": "Sets the width (in px) of the axis line."
      },
      "bordercolor": {
       "valType": "color",
       "dflt": "#444",
       "role": "style",
       "description": "Sets the axis line color."
      },
      "borderwidth": {
       "valType": "number",
       "role": "style",
       "min": 0,
       "dflt": 0,
       "description": "Sets the width (in px) or the border enclosing this color bar."
      },
      "bgcolor": {
       "valType": "color",
       "role": "style",
       "dflt": "rgba(0,0,0,0)",
       "description": "Sets the color of padded area."
      },
      "tickmode": {
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ],
       "role": "info",
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
      },
      "nticks": {
       "valType": "integer",
       "min": 0,
       "dflt": 0,
       "role": "style",
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*."
      },
      "tick0": {
       "valType": "any",
       "role": "style",
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
      },
      "dtick": {
       "valType": "any",
       "role": "style",
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
      },
      "tickvals": {
       "valType": "data_array",
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "role": "data"
      },
      "ticktext": {
       "valType": "data_array",
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "role": "data"
      },
      "ticks": {
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ],
       "role": "style",
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": ""
      },
      "ticklen": {
       "valType": "number",
       "min": 0,
       "dflt": 5,
       "role": "style",
       "description": "Sets the tick length (in px)."
      },
      "tickwidth": {
       "valType": "number",
       "min": 0,
       "dflt": 1,
       "role": "style",
       "description": "Sets the tick width (in px)."
      },
      "tickcolor": {
       "valType": "color",
       "dflt": "#444",
       "role": "style",
       "description": "Sets the tick color."
      },
      "showticklabels": {
       "valType": "boolean",
       "dflt": true,
       "role": "style",
       "description": "Determines whether or not the tick labels are drawn."
      },
      "tickfont": {
       "family": {
        "valType": "string",
        "role": "style",
        "noBlank": true,
        "strict": true,
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
       },
       "size": {
        "valType": "number",
        "role": "style",
        "min": 1
       },
       "color": {
        "valType": "color",
        "role": "style"
       },
       "description": "Sets the tick font.",
       "role": "object"
      },
      "tickangle": {
       "valType": "angle",
       "dflt": "auto",
       "role": "style",
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
      },
      "tickformat": {
       "valType": "string",
       "dflt": "",
       "role": "style",
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
      },
      "tickprefix": {
       "valType": "string",
       "dflt": "",
       "role": "style",
       "description": "Sets a tick label prefix."
      },
      "showtickprefix": {
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ],
       "dflt": "all",
       "role": "style",
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
      },
      "ticksuffix": {
       "valType": "string",
       "dflt": "",
       "role": "style",
       "description": "Sets a tick label suffix."
      },
      "showticksuffix": {
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ],
       "dflt": "all",
       "role": "style",
       "description": "Same as `showtickprefix` but for tick suffixes."
      },
      "separatethousands": {
       "valType": "boolean",
       "dflt": false,
       "role": "style",
       "description": "If \"true\", even 4-digit integers are separated"
      },
      "exponentformat": {
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ],
       "dflt": "B",
       "role": "style",
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
      },
      "showexponent": {
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ],
       "dflt": "all",
       "role": "style",
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
      },
      "title": {
       "valType": "string",
       "role": "info",
       "dflt": "Click to enter colorscale title",
       "description": "Sets the title of the color bar."
      },
      "titlefont": {
       "family": {
        "valType": "string",
        "role": "style",
        "noBlank": true,
        "strict": true,
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
       },
       "size": {
        "valType": "number",
        "role": "style",
        "min": 1
       },
       "color": {
        "valType": "color",
        "role": "style"
       },
       "description": "Sets this color bar's title font.",
       "role": "object"
      },
      "titleside": {
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ],
       "role": "style",
       "dflt": "top",
       "description": "Determines the location of the colorbar title with respect to the color bar."
      },
      "role": "object",
      "tickvalssrc": {
       "valType": "string",
       "role": "info",
       "description": "Sets the source reference on plot.ly for  tickvals ."
      },
      "ticktextsrc": {
       "valType": "string",
       "role": "info",
       "description": "Sets the source reference on plot.ly for  ticktext ."
      }
     },
     "line": {
      "color": {
       "valType": "color",
       "arrayOk": true,
       "role": "style",
       "description": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."
      },
      "colorscale": {
       "valType": "colorscale",
       "role": "style",
       "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"
      },
      "cauto": {
       "valType": "boolean",
       "role": "info",
       "dflt": true,
       "description": "Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user."
      },
      "cmax": {
       "valType": "number",
       "role": "info",
       "dflt": null,
       "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well."
      },
      "cmin": {
       "valType": "number",
       "role": "info",
       "dflt": null,
       "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well."
      },
      "autocolorscale": {
       "valType": "boolean",
       "role": "style",
       "dflt": true,
       "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed."
      },
      "reversescale": {
       "valType": "boolean",
       "role": "style",
       "dflt": false,
       "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color)."
      },
      "width": {
       "valType": "number",
       "min": 0,
       "arrayOk": true,
       "role": "style",
       "description": "Sets the width (in px) of the lines bounding the marker points."
      },
      "role": "object",
      "colorsrc": {
       "valType": "string",
       "role": "info",
       "description": "Sets the source reference on plot.ly for  color ."
      },
      "widthsrc": {
       "valType": "string",
       "role": "info",
       "description": "Sets the source reference on plot.ly for  width ."
      }
     },
     "role": "object",
     "colorsrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  color ."
     },
     "symbolsrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  symbol ."
     },
     "sizesrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  size ."
     },
     "opacitysrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  opacity ."
     }
    },
    "connectgaps": {
     "valType": "boolean",
     "dflt": false,
     "role": "info",
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected."
    },
    "fill": {
     "valType": "enumerated",
     "values": [
      "none",
      "tozeroy",
      "tozerox"
     ],
     "dflt": "none",
     "role": "style",
     "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other."
    },
    "fillcolor": {
     "valType": "color",
     "role": "style",
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."
    },
    "error_y": {
     "visible": {
      "valType": "boolean",
      "role": "info",
      "description": "Determines whether or not this set of error bars is visible."
     },
     "type": {
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ],
      "role": "info",
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."
     },
     "symmetric": {
      "valType": "boolean",
      "role": "info",
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
     },
     "array": {
      "valType": "data_array",
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "role": "data"
     },
     "arrayminus": {
      "valType": "data_array",
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "role": "data"
     },
     "value": {
      "valType": "number",
      "min": 0,
      "dflt": 10,
      "role": "info",
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars."
     },
     "valueminus": {
      "valType": "number",
      "min": 0,
      "dflt": 10,
      "role": "info",
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars"
     },
     "traceref": {
      "valType": "integer",
      "min": 0,
      "dflt": 0,
      "role": "info"
     },
     "tracerefminus": {
      "valType": "integer",
      "min": 0,
      "dflt": 0,
      "role": "info"
     },
     "copy_ystyle": {
      "valType": "boolean",
      "role": "style"
     },
     "copy_zstyle": {
      "valType": "boolean",
      "role": "style"
     },
     "color": {
      "valType": "color",
      "role": "style",
      "description": "Sets the stoke color of the error bars."
     },
     "thickness": {
      "valType": "number",
      "min": 0,
      "dflt": 2,
      "role": "style",
      "description": "Sets the thickness (in px) of the error bars."
     },
     "width": {
      "valType": "number",
      "min": 0,
      "role": "style",
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars."
     },
     "_deprecated": {
      "opacity": {
       "valType": "number",
       "role": "style",
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity."
      }
     },
     "role": "object",
     "arraysrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  array ."
     },
     "arrayminussrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  arrayminus ."
     }
    },
    "error_x": {
     "visible": {
      "valType": "boolean",
      "role": "info",
      "description": "Determines whether or not this set of error bars is visible."
     },
     "type": {
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ],
      "role": "info",
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`."
     },
     "symmetric": {
      "valType": "boolean",
      "role": "info",
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
     },
     "array": {
      "valType": "data_array",
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "role": "data"
     },
     "arrayminus": {
      "valType": "data_array",
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "role": "data"
     },
     "value": {
      "valType": "number",
      "min": 0,
      "dflt": 10,
      "role": "info",
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars."
     },
     "valueminus": {
      "valType": "number",
      "min": 0,
      "dflt": 10,
      "role": "info",
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars"
     },
     "traceref": {
      "valType": "integer",
      "min": 0,
      "dflt": 0,
      "role": "info"
     },
     "tracerefminus": {
      "valType": "integer",
      "min": 0,
      "dflt": 0,
      "role": "info"
     },
     "copy_ystyle": {
      "valType": "boolean",
      "role": "style"
     },
     "copy_zstyle": {
      "valType": "boolean",
      "role": "style"
     },
     "color": {
      "valType": "color",
      "role": "style",
      "description": "Sets the stoke color of the error bars."
     },
     "thickness": {
      "valType": "number",
      "min": 0,
      "dflt": 2,
      "role": "style",
      "description": "Sets the thickness (in px) of the error bars."
     },
     "width": {
      "valType": "number",
      "min": 0,
      "role": "style",
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars."
     },
     "_deprecated": {
      "opacity": {
       "valType": "number",
       "role": "style",
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity."
      }
     },
     "role": "object",
     "arraysrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  array ."
     },
     "arrayminussrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  arrayminus ."
     }
    },
    "xaxis": {
     "valType": "subplotid",
     "role": "info",
     "dflt": "x",
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on."
    },
    "yaxis": {
     "valType": "subplotid",
     "role": "info",
     "dflt": "y",
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on."
    },
    "xcalendar": {
     "valType": "enumerated",
     "values": [
      "gregorian",
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "hebrew",
      "islamic",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "jalali",
      "taiwan",
      "thai",
      "ummalqura"
     ],
     "role": "info",
     "dflt": "gregorian",
     "description": "Sets the calendar system to use with `x` date data."
    },
    "ycalendar": {
     "valType": "enumerated",
     "values": [
      "gregorian",
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "hebrew",
      "islamic",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "jalali",
      "taiwan",
      "thai",
      "ummalqura"
     ],
     "role": "info",
     "dflt": "gregorian",
     "description": "Sets the calendar system to use with `y` date data."
    },
    "xsrc": {
     "valType": "string",
     "role": "info",
     "description": "Sets the source reference on plot.ly for  x ."
    },
    "ysrc": {
     "valType": "string",
     "role": "info",
     "description": "Sets the source reference on plot.ly for  y ."
    },
    "textsrc": {
     "valType": "string",
     "role": "info",
     "description": "Sets the source reference on plot.ly for  text ."
    }
   }
  },
  },
 "layout": {
  "layoutAttributes": {
   "font": {
    "family": {
     "valType": "string",
     "role": "style",
     "noBlank": true,
     "strict": true,
     "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
     "dflt": "\"Open Sans\", verdana, arial, sans-serif"
    },
    "size": {
     "valType": "number",
     "role": "style",
     "min": 1,
     "dflt": 12
    },
    "color": {
     "valType": "color",
     "role": "style",
     "dflt": "#444"
    },
    "description": "Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.",
    "role": "object"
   },
   "title": {
    "valType": "string",
    "role": "info",
    "dflt": "Click to enter Plot title",
    "description": "Sets the plot's title."
   },
   "titlefont": {
    "family": {
     "valType": "string",
     "role": "style",
     "noBlank": true,
     "strict": true,
     "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
    },
    "size": {
     "valType": "number",
     "role": "style",
     "min": 1
    },
    "color": {
     "valType": "color",
     "role": "style"
    },
    "description": "Sets the title font.",
    "role": "object"
   },
   "autosize": {
    "valType": "boolean",
    "role": "info",
    "dflt": false,
    "description": "Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot."
   },
   "width": {
    "valType": "number",
    "role": "info",
    "min": 10,
    "dflt": 700,
    "description": "Sets the plot's width (in px)."
   },
   "height": {
    "valType": "number",
    "role": "info",
    "min": 10,
    "dflt": 450,
    "description": "Sets the plot's height (in px)."
   },
   "margin": {
    "l": {
     "valType": "number",
     "role": "info",
     "min": 0,
     "dflt": 80,
     "description": "Sets the left margin (in px)."
    },
    "r": {
     "valType": "number",
     "role": "info",
     "min": 0,
     "dflt": 80,
     "description": "Sets the right margin (in px)."
    },
    "t": {
     "valType": "number",
     "role": "info",
     "min": 0,
     "dflt": 100,
     "description": "Sets the top margin (in px)."
    },
    "b": {
     "valType": "number",
     "role": "info",
     "min": 0,
     "dflt": 80,
     "description": "Sets the bottom margin (in px)."
    },
    "pad": {
     "valType": "number",
     "role": "info",
     "min": 0,
     "dflt": 0,
     "description": "Sets the amount of padding (in px) between the plotting area and the axis lines"
    },
    "autoexpand": {
     "valType": "boolean",
     "role": "info",
     "dflt": true
    },
    "role": "object"
   },
   "paper_bgcolor": {
    "valType": "color",
    "role": "style",
    "dflt": "#fff",
    "description": "Sets the color of paper where the graph is drawn."
   },
   "plot_bgcolor": {
    "valType": "color",
    "role": "style",
    "dflt": "#fff",
    "description": "Sets the color of plotting area in-between x and y axes."
   },
   "separators": {
    "valType": "string",
    "role": "style",
    "dflt": ".,",
    "description": "Sets the decimal and thousand separators. For example, *. * puts a '.' before decimals and a space between thousands."
   },
   "hidesources": {
    "valType": "boolean",
    "role": "info",
    "dflt": false,
    "description": "Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the plotly service (at https://plot.ly or on-premise)."
   },
   "smith": {
    "valType": "enumerated",
    "role": "info",
    "values": [
     false
    ],
    "dflt": false
   },
   "showlegend": {
    "valType": "boolean",
    "role": "info",
    "description": "Determines whether or not a legend is drawn."
   },
   "dragmode": {
    "valType": "enumerated",
    "role": "info",
    "values": [
     "zoom",
     "pan",
     "select",
     "lasso",
     "orbit",
     "turntable"
    ],
    "dflt": "zoom",
    "description": "Determines the mode of drag interactions. *select* and *lasso* apply only to scatter traces with markers or text. *orbit* and *turntable* apply only to 3D scenes."
   },
   "hovermode": {
    "valType": "enumerated",
    "role": "info",
    "values": [
     "x",
     "y",
     "closest",
     false
    ],
    "description": "Determines the mode of hover interactions."
   },
   "xaxis": {
    "color": {
     "valType": "color",
     "dflt": "#444",
     "role": "style",
     "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this."
    },
    "title": {
     "valType": "string",
     "role": "info",
     "description": "Sets the title of this axis."
    },
    "titlefont": {
     "family": {
      "valType": "string",
      "role": "style",
      "noBlank": true,
      "strict": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
     },
     "size": {
      "valType": "number",
      "role": "style",
      "min": 1
     },
     "color": {
      "valType": "color",
      "role": "style"
     },
     "description": "Sets this axis' title font.",
     "role": "object"
    },
    "type": {
     "valType": "enumerated",
     "values": [
      "-",
      "linear",
      "log",
      "date",
      "category"
     ],
     "dflt": "-",
     "role": "info",
     "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question."
    },
    "autorange": {
     "valType": "enumerated",
     "values": [
      true,
      false,
      "reversed"
     ],
     "dflt": true,
     "role": "style",
     "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*."
    },
    "rangemode": {
     "valType": "enumerated",
     "values": [
      "normal",
      "tozero",
      "nonnegative"
     ],
     "dflt": "normal",
     "role": "style",
     "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data."
    },
    "range": {
     "valType": "info_array",
     "role": "info",
     "items": [
      {
       "valType": "any"
      },
      {
       "valType": "any"
      }
     ],
     "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."
    },
    "fixedrange": {
     "valType": "boolean",
     "dflt": false,
     "role": "info",
     "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled."
    },
    "tickmode": {
     "valType": "enumerated",
     "values": [
      "auto",
      "linear",
      "array"
     ],
     "role": "info",
     "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
    },
    "nticks": {
     "valType": "integer",
     "min": 0,
     "dflt": 0,
     "role": "style",
     "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*."
    },
    "tick0": {
     "valType": "any",
     "role": "style",
     "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
    },
    "dtick": {
     "valType": "any",
     "role": "style",
     "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
    },
    "tickvals": {
     "valType": "data_array",
     "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
     "role": "data"
    },
    "ticktext": {
     "valType": "data_array",
     "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
     "role": "data"
    },
    "ticks": {
     "valType": "enumerated",
     "values": [
      "outside",
      "inside",
      ""
     ],
     "role": "style",
     "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
    },
    "mirror": {
     "valType": "enumerated",
     "values": [
      true,
      "ticks",
      false,
      "all",
      "allticks"
     ],
     "dflt": false,
     "role": "style",
     "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots."
    },
    "ticklen": {
     "valType": "number",
     "min": 0,
     "dflt": 5,
     "role": "style",
     "description": "Sets the tick length (in px)."
    },
    "tickwidth": {
     "valType": "number",
     "min": 0,
     "dflt": 1,
     "role": "style",
     "description": "Sets the tick width (in px)."
    },
    "tickcolor": {
     "valType": "color",
     "dflt": "#444",
     "role": "style",
     "description": "Sets the tick color."
    },
    "showticklabels": {
     "valType": "boolean",
     "dflt": true,
     "role": "style",
     "description": "Determines whether or not the tick labels are drawn."
    },
    "tickfont": {
     "family": {
      "valType": "string",
      "role": "style",
      "noBlank": true,
      "strict": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
     },
     "size": {
      "valType": "number",
      "role": "style",
      "min": 1
     },
     "color": {
      "valType": "color",
      "role": "style"
     },
     "description": "Sets the tick font.",
     "role": "object"
    },
    "tickangle": {
     "valType": "angle",
     "dflt": "auto",
     "role": "style",
     "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
    },
    "tickprefix": {
     "valType": "string",
     "dflt": "",
     "role": "style",
     "description": "Sets a tick label prefix."
    },
    "showtickprefix": {
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ],
     "dflt": "all",
     "role": "style",
     "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
    },
    "ticksuffix": {
     "valType": "string",
     "dflt": "",
     "role": "style",
     "description": "Sets a tick label suffix."
    },
    "showticksuffix": {
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ],
     "dflt": "all",
     "role": "style",
     "description": "Same as `showtickprefix` but for tick suffixes."
    },
    "showexponent": {
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ],
     "dflt": "all",
     "role": "style",
     "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
    },
    "exponentformat": {
     "valType": "enumerated",
     "values": [
      "none",
      "e",
      "E",
      "power",
      "SI",
      "B"
     ],
     "dflt": "B",
     "role": "style",
     "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
    },
    "separatethousands": {
     "valType": "boolean",
     "dflt": false,
     "role": "style",
     "description": "If \"true\", even 4-digit integers are separated"
    },
    "tickformat": {
     "valType": "string",
     "dflt": "",
     "role": "style",
     "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
    },
    "hoverformat": {
     "valType": "string",
     "dflt": "",
     "role": "style",
     "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
    },
    "showline": {
     "valType": "boolean",
     "dflt": false,
     "role": "style",
     "description": "Determines whether or not a line bounding this axis is drawn."
    },
    "linecolor": {
     "valType": "color",
     "dflt": "#444",
     "role": "style",
     "description": "Sets the axis line color."
    },
    "linewidth": {
     "valType": "number",
     "min": 0,
     "dflt": 1,
     "role": "style",
     "description": "Sets the width (in px) of the axis line."
    },
    "showgrid": {
     "valType": "boolean",
     "role": "style",
     "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
    },
    "gridcolor": {
     "valType": "color",
     "dflt": "#eee",
     "role": "style",
     "description": "Sets the color of the grid lines."
    },
    "gridwidth": {
     "valType": "number",
     "min": 0,
     "dflt": 1,
     "role": "style",
     "description": "Sets the width (in px) of the grid lines."
    },
    "zeroline": {
     "valType": "boolean",
     "role": "style",
     "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
    },
    "zerolinecolor": {
     "valType": "color",
     "dflt": "#444",
     "role": "style",
     "description": "Sets the line color of the zero line."
    },
    "zerolinewidth": {
     "valType": "number",
     "dflt": 1,
     "role": "style",
     "description": "Sets the width (in px) of the zero line."
    },
    "anchor": {
     "valType": "enumerated",
     "values": [
      "free",
      "/^x([2-9]|[1-9][0-9]+)?$/",
      "/^y([2-9]|[1-9][0-9]+)?$/"
     ],
     "role": "info",
     "description": "If set to an opposite-letter axis id (e.g. `xaxis2`, `yaxis`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`."
    },
    "side": {
     "valType": "enumerated",
     "values": [
      "top",
      "bottom",
      "left",
      "right"
     ],
     "role": "info",
     "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area."
    },
    "overlaying": {
     "valType": "enumerated",
     "values": [
      "free",
      "/^x([2-9]|[1-9][0-9]+)?$/",
      "/^y([2-9]|[1-9][0-9]+)?$/"
     ],
     "role": "info",
     "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis. If *false*, this axis does not overlay any same-letter axes."
    },
    "domain": {
     "valType": "info_array",
     "role": "info",
     "items": [
      {
       "valType": "number",
       "min": 0,
       "max": 1
      },
      {
       "valType": "number",
       "min": 0,
       "max": 1
      }
     ],
     "dflt": [
      0,
      1
     ],
     "description": "Sets the domain of this axis (in plot fraction)."
    },
    "position": {
     "valType": "number",
     "min": 0,
     "max": 1,
     "dflt": 0,
     "role": "style",
     "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*."
    },
    "categoryorder": {
     "valType": "enumerated",
     "values": [
      "trace",
      "category ascending",
      "category descending",
      "array"
     ],
     "dflt": "trace",
     "role": "info",
     "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`."
    },
    "categoryarray": {
     "valType": "data_array",
     "role": "data",
     "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."
    },
    "_deprecated": {
     "autotick": {
      "valType": "boolean",
      "role": "info",
      "description": "Obsolete. Set `tickmode` to *auto* for old `autotick` *true* behavior. Set `tickmode` to *linear* for `autotick` *false*."
     }
    },
    "_isSubplotObj": true,
    "rangeslider": {
     "bgcolor": {
      "valType": "color",
      "dflt": "#fff",
      "role": "style",
      "description": "Sets the background color of the range slider."
     },
     "bordercolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the border color of the range slider."
     },
     "borderwidth": {
      "valType": "integer",
      "dflt": 0,
      "min": 0,
      "role": "style",
      "description": "Sets the border color of the range slider."
     },
     "range": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "any"
       },
       {
        "valType": "any"
       }
      ],
      "description": "Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."
     },
     "thickness": {
      "valType": "number",
      "dflt": 0.15,
      "min": 0,
      "max": 1,
      "role": "style",
      "description": "The height of the range slider as a fraction of the total plot area height."
     },
     "visible": {
      "valType": "boolean",
      "dflt": true,
      "role": "info",
      "description": "Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`"
     },
     "role": "object"
    },
    "rangeselector": {
     "visible": {
      "valType": "boolean",
      "role": "info",
      "description": "Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to *date*."
     },
     "buttons": {
      "items": {
       "button": {
        "step": {
         "valType": "enumerated",
         "role": "info",
         "values": [
          "month",
          "year",
          "day",
          "hour",
          "minute",
          "second",
          "all"
         ],
         "dflt": "month",
         "description": "The unit of measurement that the `count` value will set the range by."
        },
        "stepmode": {
         "valType": "enumerated",
         "role": "info",
         "values": [
          "backward",
          "todate"
         ],
         "dflt": "backward",
         "description": "Sets the range update mode. If *backward*, the range update shifts the start of range back *count* times *step* milliseconds. If *todate*, the range update shifts the start of range back to the first timestamp from *count* times *step* milliseconds back. For example, with `step` set to *year* and `count` set to *1* the range update shifts the start of the range back to January 01 of the current year. Month and year *todate* are currently available only for the built-in (Gregorian) calendar."
        },
        "count": {
         "valType": "number",
         "role": "info",
         "min": 0,
         "dflt": 1,
         "description": "Sets the number of steps to take to update the range. Use with `step` to specify the update interval."
        },
        "label": {
         "valType": "string",
         "role": "info",
         "description": "Sets the text label to appear on the button."
        },
        "description": "Sets the specifications for each buttons. By default, a range selector comes with no buttons.",
        "role": "object"
       }
      },
      "role": "object"
     },
     "x": {
      "valType": "number",
      "min": -2,
      "max": 3,
      "role": "style",
      "description": "Sets the x position (in normalized coordinates) of the range selector."
     },
     "xanchor": {
      "valType": "enumerated",
      "values": [
       "auto",
       "left",
       "center",
       "right"
      ],
      "dflt": "left",
      "role": "info",
      "description": "Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector."
     },
     "y": {
      "valType": "number",
      "min": -2,
      "max": 3,
      "role": "style",
      "description": "Sets the y position (in normalized coordinates) of the range selector."
     },
     "yanchor": {
      "valType": "enumerated",
      "values": [
       "auto",
       "top",
       "middle",
       "bottom"
      ],
      "dflt": "bottom",
      "role": "info",
      "description": "Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector."
     },
     "font": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets the font of the range selector button text.",
      "role": "object"
     },
     "bgcolor": {
      "valType": "color",
      "dflt": "#eee",
      "role": "style",
      "description": "Sets the background color of the range selector buttons."
     },
     "activecolor": {
      "valType": "color",
      "role": "style",
      "description": "Sets the background color of the active range selector button."
     },
     "bordercolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the color of the border enclosing the range selector."
     },
     "borderwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 0,
      "role": "style",
      "description": "Sets the width (in px) of the border enclosing the range selector."
     },
     "role": "object"
    },
    "calendar": {
     "valType": "enumerated",
     "values": [
      "gregorian",
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "hebrew",
      "islamic",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "jalali",
      "taiwan",
      "thai",
      "ummalqura"
     ],
     "role": "info",
     "dflt": "gregorian",
     "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`"
    },
    "role": "object",
    "tickvalssrc": {
     "valType": "string",
     "role": "info",
     "description": "Sets the source reference on plot.ly for  tickvals ."
    },
    "ticktextsrc": {
     "valType": "string",
     "role": "info",
     "description": "Sets the source reference on plot.ly for  ticktext ."
    },
    "categoryarraysrc": {
     "valType": "string",
     "role": "info",
     "description": "Sets the source reference on plot.ly for  categoryarray ."
    }
   },
   "yaxis": {
    "color": {
     "valType": "color",
     "dflt": "#444",
     "role": "style",
     "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this."
    },
    "title": {
     "valType": "string",
     "role": "info",
     "description": "Sets the title of this axis."
    },
    "titlefont": {
     "family": {
      "valType": "string",
      "role": "style",
      "noBlank": true,
      "strict": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
     },
     "size": {
      "valType": "number",
      "role": "style",
      "min": 1
     },
     "color": {
      "valType": "color",
      "role": "style"
     },
     "description": "Sets this axis' title font.",
     "role": "object"
    },
    "type": {
     "valType": "enumerated",
     "values": [
      "-",
      "linear",
      "log",
      "date",
      "category"
     ],
     "dflt": "-",
     "role": "info",
     "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question."
    },
    "autorange": {
     "valType": "enumerated",
     "values": [
      true,
      false,
      "reversed"
     ],
     "dflt": true,
     "role": "style",
     "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*."
    },
    "rangemode": {
     "valType": "enumerated",
     "values": [
      "normal",
      "tozero",
      "nonnegative"
     ],
     "dflt": "normal",
     "role": "style",
     "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data."
    },
    "range": {
     "valType": "info_array",
     "role": "info",
     "items": [
      {
       "valType": "any"
      },
      {
       "valType": "any"
      }
     ],
     "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."
    },
    "fixedrange": {
     "valType": "boolean",
     "dflt": false,
     "role": "info",
     "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled."
    },
    "tickmode": {
     "valType": "enumerated",
     "values": [
      "auto",
      "linear",
      "array"
     ],
     "role": "info",
     "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
    },
    "nticks": {
     "valType": "integer",
     "min": 0,
     "dflt": 0,
     "role": "style",
     "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*."
    },
    "tick0": {
     "valType": "any",
     "role": "style",
     "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
    },
    "dtick": {
     "valType": "any",
     "role": "style",
     "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
    },
    "tickvals": {
     "valType": "data_array",
     "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
     "role": "data"
    },
    "ticktext": {
     "valType": "data_array",
     "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
     "role": "data"
    },
    "ticks": {
     "valType": "enumerated",
     "values": [
      "outside",
      "inside",
      ""
     ],
     "role": "style",
     "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
    },
    "mirror": {
     "valType": "enumerated",
     "values": [
      true,
      "ticks",
      false,
      "all",
      "allticks"
     ],
     "dflt": false,
     "role": "style",
     "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots."
    },
    "ticklen": {
     "valType": "number",
     "min": 0,
     "dflt": 5,
     "role": "style",
     "description": "Sets the tick length (in px)."
    },
    "tickwidth": {
     "valType": "number",
     "min": 0,
     "dflt": 1,
     "role": "style",
     "description": "Sets the tick width (in px)."
    },
    "tickcolor": {
     "valType": "color",
     "dflt": "#444",
     "role": "style",
     "description": "Sets the tick color."
    },
    "showticklabels": {
     "valType": "boolean",
     "dflt": true,
     "role": "style",
     "description": "Determines whether or not the tick labels are drawn."
    },
    "tickfont": {
     "family": {
      "valType": "string",
      "role": "style",
      "noBlank": true,
      "strict": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
     },
     "size": {
      "valType": "number",
      "role": "style",
      "min": 1
     },
     "color": {
      "valType": "color",
      "role": "style"
     },
     "description": "Sets the tick font.",
     "role": "object"
    },
    "tickangle": {
     "valType": "angle",
     "dflt": "auto",
     "role": "style",
     "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
    },
    "tickprefix": {
     "valType": "string",
     "dflt": "",
     "role": "style",
     "description": "Sets a tick label prefix."
    },
    "showtickprefix": {
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ],
     "dflt": "all",
     "role": "style",
     "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
    },
    "ticksuffix": {
     "valType": "string",
     "dflt": "",
     "role": "style",
     "description": "Sets a tick label suffix."
    },
    "showticksuffix": {
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ],
     "dflt": "all",
     "role": "style",
     "description": "Same as `showtickprefix` but for tick suffixes."
    },
    "showexponent": {
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ],
     "dflt": "all",
     "role": "style",
     "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
    },
    "exponentformat": {
     "valType": "enumerated",
     "values": [
      "none",
      "e",
      "E",
      "power",
      "SI",
      "B"
     ],
     "dflt": "B",
     "role": "style",
     "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
    },
    "separatethousands": {
     "valType": "boolean",
     "dflt": false,
     "role": "style",
     "description": "If \"true\", even 4-digit integers are separated"
    },
    "tickformat": {
     "valType": "string",
     "dflt": "",
     "role": "style",
     "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
    },
    "hoverformat": {
     "valType": "string",
     "dflt": "",
     "role": "style",
     "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
    },
    "showline": {
     "valType": "boolean",
     "dflt": false,
     "role": "style",
     "description": "Determines whether or not a line bounding this axis is drawn."
    },
    "linecolor": {
     "valType": "color",
     "dflt": "#444",
     "role": "style",
     "description": "Sets the axis line color."
    },
    "linewidth": {
     "valType": "number",
     "min": 0,
     "dflt": 1,
     "role": "style",
     "description": "Sets the width (in px) of the axis line."
    },
    "showgrid": {
     "valType": "boolean",
     "role": "style",
     "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
    },
    "gridcolor": {
     "valType": "color",
     "dflt": "#eee",
     "role": "style",
     "description": "Sets the color of the grid lines."
    },
    "gridwidth": {
     "valType": "number",
     "min": 0,
     "dflt": 1,
     "role": "style",
     "description": "Sets the width (in px) of the grid lines."
    },
    "zeroline": {
     "valType": "boolean",
     "role": "style",
     "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
    },
    "zerolinecolor": {
     "valType": "color",
     "dflt": "#444",
     "role": "style",
     "description": "Sets the line color of the zero line."
    },
    "zerolinewidth": {
     "valType": "number",
     "dflt": 1,
     "role": "style",
     "description": "Sets the width (in px) of the zero line."
    },
    "anchor": {
     "valType": "enumerated",
     "values": [
      "free",
      "/^x([2-9]|[1-9][0-9]+)?$/",
      "/^y([2-9]|[1-9][0-9]+)?$/"
     ],
     "role": "info",
     "description": "If set to an opposite-letter axis id (e.g. `xaxis2`, `yaxis`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`."
    },
    "side": {
     "valType": "enumerated",
     "values": [
      "top",
      "bottom",
      "left",
      "right"
     ],
     "role": "info",
     "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area."
    },
    "overlaying": {
     "valType": "enumerated",
     "values": [
      "free",
      "/^x([2-9]|[1-9][0-9]+)?$/",
      "/^y([2-9]|[1-9][0-9]+)?$/"
     ],
     "role": "info",
     "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis. If *false*, this axis does not overlay any same-letter axes."
    },
    "domain": {
     "valType": "info_array",
     "role": "info",
     "items": [
      {
       "valType": "number",
       "min": 0,
       "max": 1
      },
      {
       "valType": "number",
       "min": 0,
       "max": 1
      }
     ],
     "dflt": [
      0,
      1
     ],
     "description": "Sets the domain of this axis (in plot fraction)."
    },
    "position": {
     "valType": "number",
     "min": 0,
     "max": 1,
     "dflt": 0,
     "role": "style",
     "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*."
    },
    "categoryorder": {
     "valType": "enumerated",
     "values": [
      "trace",
      "category ascending",
      "category descending",
      "array"
     ],
     "dflt": "trace",
     "role": "info",
     "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`."
    },
    "categoryarray": {
     "valType": "data_array",
     "role": "data",
     "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."
    },
    "_deprecated": {
     "autotick": {
      "valType": "boolean",
      "role": "info",
      "description": "Obsolete. Set `tickmode` to *auto* for old `autotick` *true* behavior. Set `tickmode` to *linear* for `autotick` *false*."
     }
    },
    "_isSubplotObj": true,
    "calendar": {
     "valType": "enumerated",
     "values": [
      "gregorian",
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "hebrew",
      "islamic",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "jalali",
      "taiwan",
      "thai",
      "ummalqura"
     ],
     "role": "info",
     "dflt": "gregorian",
     "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`"
    },
    "role": "object",
    "tickvalssrc": {
     "valType": "string",
     "role": "info",
     "description": "Sets the source reference on plot.ly for  tickvals ."
    },
    "ticktextsrc": {
     "valType": "string",
     "role": "info",
     "description": "Sets the source reference on plot.ly for  ticktext ."
    },
    "categoryarraysrc": {
     "valType": "string",
     "role": "info",
     "description": "Sets the source reference on plot.ly for  categoryarray ."
    }
   },
   "ternary": {
    "domain": {
     "x": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "number",
        "min": 0,
        "max": 1
       },
       {
        "valType": "number",
        "min": 0,
        "max": 1
       }
      ],
      "dflt": [
       0,
       1
      ],
      "description": "Sets the horizontal domain of this subplot (in plot fraction)."
     },
     "y": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "number",
        "min": 0,
        "max": 1
       },
       {
        "valType": "number",
        "min": 0,
        "max": 1
       }
      ],
      "dflt": [
       0,
       1
      ],
      "description": "Sets the vertical domain of this subplot (in plot fraction)."
     },
     "role": "object"
    },
    "bgcolor": {
     "valType": "color",
     "role": "style",
     "dflt": "#fff",
     "description": "Set the background color of the subplot"
    },
    "sum": {
     "valType": "number",
     "role": "info",
     "dflt": 1,
     "min": 0,
     "description": "The number each triplet should sum to, and the maximum range of each axis"
    },
    "aaxis": {
     "title": {
      "valType": "string",
      "role": "info",
      "description": "Sets the title of this axis."
     },
     "titlefont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets this axis' title font.",
      "role": "object"
     },
     "color": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this."
     },
     "tickmode": {
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ],
      "role": "info",
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
     },
     "nticks": {
      "valType": "integer",
      "min": 1,
      "dflt": 6,
      "role": "style",
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*."
     },
     "tick0": {
      "valType": "any",
      "role": "style",
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
     },
     "dtick": {
      "valType": "any",
      "role": "style",
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
     },
     "tickvals": {
      "valType": "data_array",
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "role": "data"
     },
     "ticktext": {
      "valType": "data_array",
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "role": "data"
     },
     "ticks": {
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ],
      "role": "style",
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
     },
     "ticklen": {
      "valType": "number",
      "min": 0,
      "dflt": 5,
      "role": "style",
      "description": "Sets the tick length (in px)."
     },
     "tickwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the tick width (in px)."
     },
     "tickcolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the tick color."
     },
     "showticklabels": {
      "valType": "boolean",
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not the tick labels are drawn."
     },
     "showtickprefix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
     },
     "tickprefix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label prefix."
     },
     "showticksuffix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "Same as `showtickprefix` but for tick suffixes."
     },
     "ticksuffix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label suffix."
     },
     "showexponent": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
     },
     "exponentformat": {
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ],
      "dflt": "B",
      "role": "style",
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
     },
     "separatethousands": {
      "valType": "boolean",
      "dflt": false,
      "role": "style",
      "description": "If \"true\", even 4-digit integers are separated"
     },
     "tickfont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets the tick font.",
      "role": "object"
     },
     "tickangle": {
      "valType": "angle",
      "dflt": "auto",
      "role": "style",
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
     },
     "tickformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "hoverformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "showline": {
      "valType": "boolean",
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not a line bounding this axis is drawn."
     },
     "linecolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the axis line color."
     },
     "linewidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the axis line."
     },
     "showgrid": {
      "valType": "boolean",
      "role": "style",
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "dflt": true
     },
     "gridcolor": {
      "valType": "color",
      "dflt": "#eee",
      "role": "style",
      "description": "Sets the color of the grid lines."
     },
     "gridwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the grid lines."
     },
     "min": {
      "valType": "number",
      "dflt": 0,
      "role": "info",
      "min": 0,
      "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero."
     },
     "role": "object",
     "tickvalssrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  tickvals ."
     },
     "ticktextsrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  ticktext ."
     }
    },
    "baxis": {
     "title": {
      "valType": "string",
      "role": "info",
      "description": "Sets the title of this axis."
     },
     "titlefont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets this axis' title font.",
      "role": "object"
     },
     "color": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this."
     },
     "tickmode": {
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ],
      "role": "info",
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
     },
     "nticks": {
      "valType": "integer",
      "min": 1,
      "dflt": 6,
      "role": "style",
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*."
     },
     "tick0": {
      "valType": "any",
      "role": "style",
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
     },
     "dtick": {
      "valType": "any",
      "role": "style",
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
     },
     "tickvals": {
      "valType": "data_array",
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "role": "data"
     },
     "ticktext": {
      "valType": "data_array",
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "role": "data"
     },
     "ticks": {
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ],
      "role": "style",
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
     },
     "ticklen": {
      "valType": "number",
      "min": 0,
      "dflt": 5,
      "role": "style",
      "description": "Sets the tick length (in px)."
     },
     "tickwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the tick width (in px)."
     },
     "tickcolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the tick color."
     },
     "showticklabels": {
      "valType": "boolean",
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not the tick labels are drawn."
     },
     "showtickprefix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
     },
     "tickprefix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label prefix."
     },
     "showticksuffix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "Same as `showtickprefix` but for tick suffixes."
     },
     "ticksuffix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label suffix."
     },
     "showexponent": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
     },
     "exponentformat": {
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ],
      "dflt": "B",
      "role": "style",
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
     },
     "separatethousands": {
      "valType": "boolean",
      "dflt": false,
      "role": "style",
      "description": "If \"true\", even 4-digit integers are separated"
     },
     "tickfont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets the tick font.",
      "role": "object"
     },
     "tickangle": {
      "valType": "angle",
      "dflt": "auto",
      "role": "style",
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
     },
     "tickformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "hoverformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "showline": {
      "valType": "boolean",
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not a line bounding this axis is drawn."
     },
     "linecolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the axis line color."
     },
     "linewidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the axis line."
     },
     "showgrid": {
      "valType": "boolean",
      "role": "style",
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "dflt": true
     },
     "gridcolor": {
      "valType": "color",
      "dflt": "#eee",
      "role": "style",
      "description": "Sets the color of the grid lines."
     },
     "gridwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the grid lines."
     },
     "min": {
      "valType": "number",
      "dflt": 0,
      "role": "info",
      "min": 0,
      "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero."
     },
     "role": "object",
     "tickvalssrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  tickvals ."
     },
     "ticktextsrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  ticktext ."
     }
    },
    "caxis": {
     "title": {
      "valType": "string",
      "role": "info",
      "description": "Sets the title of this axis."
     },
     "titlefont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets this axis' title font.",
      "role": "object"
     },
     "color": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this."
     },
     "tickmode": {
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ],
      "role": "info",
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
     },
     "nticks": {
      "valType": "integer",
      "min": 1,
      "dflt": 6,
      "role": "style",
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*."
     },
     "tick0": {
      "valType": "any",
      "role": "style",
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
     },
     "dtick": {
      "valType": "any",
      "role": "style",
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
     },
     "tickvals": {
      "valType": "data_array",
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "role": "data"
     },
     "ticktext": {
      "valType": "data_array",
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "role": "data"
     },
     "ticks": {
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ],
      "role": "style",
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
     },
     "ticklen": {
      "valType": "number",
      "min": 0,
      "dflt": 5,
      "role": "style",
      "description": "Sets the tick length (in px)."
     },
     "tickwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the tick width (in px)."
     },
     "tickcolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the tick color."
     },
     "showticklabels": {
      "valType": "boolean",
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not the tick labels are drawn."
     },
     "showtickprefix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
     },
     "tickprefix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label prefix."
     },
     "showticksuffix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "Same as `showtickprefix` but for tick suffixes."
     },
     "ticksuffix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label suffix."
     },
     "showexponent": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
     },
     "exponentformat": {
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ],
      "dflt": "B",
      "role": "style",
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
     },
     "separatethousands": {
      "valType": "boolean",
      "dflt": false,
      "role": "style",
      "description": "If \"true\", even 4-digit integers are separated"
     },
     "tickfont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets the tick font.",
      "role": "object"
     },
     "tickangle": {
      "valType": "angle",
      "dflt": "auto",
      "role": "style",
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
     },
     "tickformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "hoverformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "showline": {
      "valType": "boolean",
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not a line bounding this axis is drawn."
     },
     "linecolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the axis line color."
     },
     "linewidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the axis line."
     },
     "showgrid": {
      "valType": "boolean",
      "role": "style",
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "dflt": true
     },
     "gridcolor": {
      "valType": "color",
      "dflt": "#eee",
      "role": "style",
      "description": "Sets the color of the grid lines."
     },
     "gridwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the grid lines."
     },
     "min": {
      "valType": "number",
      "dflt": 0,
      "role": "info",
      "min": 0,
      "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero."
     },
     "role": "object",
     "tickvalssrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  tickvals ."
     },
     "ticktextsrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  ticktext ."
     }
    },
    "_isSubplotObj": true,
    "role": "object"
   },
   "scene": {
    "bgcolor": {
     "valType": "color",
     "role": "style",
     "dflt": "rgba(0,0,0,0)"
    },
    "camera": {
     "up": {
      "x": {
       "valType": "number",
       "role": "info",
       "dflt": 0
      },
      "y": {
       "valType": "number",
       "role": "info",
       "dflt": 0
      },
      "z": {
       "valType": "number",
       "role": "info",
       "dflt": 1
      },
      "description": "Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is *{x: 0, y: 0, z: 1}* which means that the z axis points up.",
      "role": "object"
     },
     "center": {
      "x": {
       "valType": "number",
       "role": "info",
       "dflt": 0
      },
      "y": {
       "valType": "number",
       "role": "info",
       "dflt": 0
      },
      "z": {
       "valType": "number",
       "role": "info",
       "dflt": 0
      },
      "description": "Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation.",
      "role": "object"
     },
     "eye": {
      "x": {
       "valType": "number",
       "role": "info",
       "dflt": 1.25
      },
      "y": {
       "valType": "number",
       "role": "info",
       "dflt": 1.25
      },
      "z": {
       "valType": "number",
       "role": "info",
       "dflt": 1.25
      },
      "description": "Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene.",
      "role": "object"
     },
     "role": "object"
    },
    "domain": {
     "x": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "number",
        "min": 0,
        "max": 1
       },
       {
        "valType": "number",
        "min": 0,
        "max": 1
       }
      ],
      "dflt": [
       0,
       1
      ],
      "description": "Sets the horizontal domain of this scene (in plot fraction)."
     },
     "y": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "number",
        "min": 0,
        "max": 1
       },
       {
        "valType": "number",
        "min": 0,
        "max": 1
       }
      ],
      "dflt": [
       0,
       1
      ],
      "description": "Sets the vertical domain of this scene (in plot fraction)."
     },
     "role": "object"
    },
    "aspectmode": {
     "valType": "enumerated",
     "role": "info",
     "values": [
      "auto",
      "cube",
      "data",
      "manual"
     ],
     "dflt": "auto",
     "description": "If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used."
    },
    "aspectratio": {
     "x": {
      "valType": "number",
      "role": "info",
      "min": 0
     },
     "y": {
      "valType": "number",
      "role": "info",
      "min": 0
     },
     "z": {
      "valType": "number",
      "role": "info",
      "min": 0
     },
     "description": "Sets this scene's axis aspectratio.",
     "role": "object"
    },
    "xaxis": {
     "showspikes": {
      "valType": "boolean",
      "role": "info",
      "dflt": true,
      "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover."
     },
     "spikesides": {
      "valType": "boolean",
      "role": "info",
      "dflt": true,
      "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover."
     },
     "spikethickness": {
      "valType": "number",
      "role": "style",
      "min": 0,
      "dflt": 2,
      "description": "Sets the thickness (in px) of the spikes."
     },
     "spikecolor": {
      "valType": "color",
      "role": "style",
      "dflt": "#444",
      "description": "Sets the color of the spikes."
     },
     "showbackground": {
      "valType": "boolean",
      "role": "info",
      "dflt": false,
      "description": "Sets whether or not this axis' wall has a background color."
     },
     "backgroundcolor": {
      "valType": "color",
      "role": "style",
      "dflt": "rgba(204, 204, 204, 0.5)",
      "description": "Sets the background color of this axis' wall."
     },
     "showaxeslabels": {
      "valType": "boolean",
      "role": "info",
      "dflt": true,
      "description": "Sets whether or not this axis is labeled"
     },
     "color": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this."
     },
     "categoryorder": {
      "valType": "enumerated",
      "values": [
       "trace",
       "category ascending",
       "category descending",
       "array"
      ],
      "dflt": "trace",
      "role": "info",
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`."
     },
     "categoryarray": {
      "valType": "data_array",
      "role": "data",
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."
     },
     "title": {
      "valType": "string",
      "role": "info",
      "description": "Sets the title of this axis."
     },
     "titlefont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets this axis' title font.",
      "role": "object"
     },
     "type": {
      "valType": "enumerated",
      "values": [
       "-",
       "linear",
       "log",
       "date",
       "category"
      ],
      "dflt": "-",
      "role": "info",
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question."
     },
     "autorange": {
      "valType": "enumerated",
      "values": [
       true,
       false,
       "reversed"
      ],
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*."
     },
     "rangemode": {
      "valType": "enumerated",
      "values": [
       "normal",
       "tozero",
       "nonnegative"
      ],
      "dflt": "normal",
      "role": "style",
      "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data."
     },
     "range": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "any"
       },
       {
        "valType": "any"
       }
      ],
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."
     },
     "fixedrange": {
      "valType": "boolean",
      "dflt": false,
      "role": "info",
      "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled."
     },
     "tickmode": {
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ],
      "role": "info",
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
     },
     "nticks": {
      "valType": "integer",
      "min": 0,
      "dflt": 0,
      "role": "style",
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*."
     },
     "tick0": {
      "valType": "any",
      "role": "style",
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
     },
     "dtick": {
      "valType": "any",
      "role": "style",
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
     },
     "tickvals": {
      "valType": "data_array",
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "role": "data"
     },
     "ticktext": {
      "valType": "data_array",
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "role": "data"
     },
     "ticks": {
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ],
      "role": "style",
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
     },
     "mirror": {
      "valType": "enumerated",
      "values": [
       true,
       "ticks",
       false,
       "all",
       "allticks"
      ],
      "dflt": false,
      "role": "style",
      "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots."
     },
     "ticklen": {
      "valType": "number",
      "min": 0,
      "dflt": 5,
      "role": "style",
      "description": "Sets the tick length (in px)."
     },
     "tickwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the tick width (in px)."
     },
     "tickcolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the tick color."
     },
     "showticklabels": {
      "valType": "boolean",
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not the tick labels are drawn."
     },
     "tickfont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets the tick font.",
      "role": "object"
     },
     "tickangle": {
      "valType": "angle",
      "dflt": "auto",
      "role": "style",
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
     },
     "tickprefix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label prefix."
     },
     "showtickprefix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
     },
     "ticksuffix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label suffix."
     },
     "showticksuffix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "Same as `showtickprefix` but for tick suffixes."
     },
     "showexponent": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
     },
     "exponentformat": {
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ],
      "dflt": "B",
      "role": "style",
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
     },
     "separatethousands": {
      "valType": "boolean",
      "dflt": false,
      "role": "style",
      "description": "If \"true\", even 4-digit integers are separated"
     },
     "tickformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "hoverformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "showline": {
      "valType": "boolean",
      "dflt": false,
      "role": "style",
      "description": "Determines whether or not a line bounding this axis is drawn."
     },
     "linecolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the axis line color."
     },
     "linewidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the axis line."
     },
     "showgrid": {
      "valType": "boolean",
      "role": "style",
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
     },
     "gridcolor": {
      "valType": "color",
      "dflt": "rgb(204, 204, 204)",
      "role": "style",
      "description": "Sets the color of the grid lines."
     },
     "gridwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the grid lines."
     },
     "zeroline": {
      "valType": "boolean",
      "role": "style",
      "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
     },
     "zerolinecolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the line color of the zero line."
     },
     "zerolinewidth": {
      "valType": "number",
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the zero line."
     },
     "calendar": {
      "valType": "enumerated",
      "values": [
       "gregorian",
       "chinese",
       "coptic",
       "discworld",
       "ethiopian",
       "hebrew",
       "islamic",
       "julian",
       "mayan",
       "nanakshahi",
       "nepali",
       "persian",
       "jalali",
       "taiwan",
       "thai",
       "ummalqura"
      ],
      "role": "info",
      "dflt": "gregorian",
      "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`"
     },
     "role": "object",
     "categoryarraysrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  categoryarray ."
     },
     "tickvalssrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  tickvals ."
     },
     "ticktextsrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  ticktext ."
     }
    },
    "yaxis": {
     "showspikes": {
      "valType": "boolean",
      "role": "info",
      "dflt": true,
      "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover."
     },
     "spikesides": {
      "valType": "boolean",
      "role": "info",
      "dflt": true,
      "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover."
     },
     "spikethickness": {
      "valType": "number",
      "role": "style",
      "min": 0,
      "dflt": 2,
      "description": "Sets the thickness (in px) of the spikes."
     },
     "spikecolor": {
      "valType": "color",
      "role": "style",
      "dflt": "#444",
      "description": "Sets the color of the spikes."
     },
     "showbackground": {
      "valType": "boolean",
      "role": "info",
      "dflt": false,
      "description": "Sets whether or not this axis' wall has a background color."
     },
     "backgroundcolor": {
      "valType": "color",
      "role": "style",
      "dflt": "rgba(204, 204, 204, 0.5)",
      "description": "Sets the background color of this axis' wall."
     },
     "showaxeslabels": {
      "valType": "boolean",
      "role": "info",
      "dflt": true,
      "description": "Sets whether or not this axis is labeled"
     },
     "color": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this."
     },
     "categoryorder": {
      "valType": "enumerated",
      "values": [
       "trace",
       "category ascending",
       "category descending",
       "array"
      ],
      "dflt": "trace",
      "role": "info",
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`."
     },
     "categoryarray": {
      "valType": "data_array",
      "role": "data",
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."
     },
     "title": {
      "valType": "string",
      "role": "info",
      "description": "Sets the title of this axis."
     },
     "titlefont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets this axis' title font.",
      "role": "object"
     },
     "type": {
      "valType": "enumerated",
      "values": [
       "-",
       "linear",
       "log",
       "date",
       "category"
      ],
      "dflt": "-",
      "role": "info",
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question."
     },
     "autorange": {
      "valType": "enumerated",
      "values": [
       true,
       false,
       "reversed"
      ],
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*."
     },
     "rangemode": {
      "valType": "enumerated",
      "values": [
       "normal",
       "tozero",
       "nonnegative"
      ],
      "dflt": "normal",
      "role": "style",
      "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data."
     },
     "range": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "any"
       },
       {
        "valType": "any"
       }
      ],
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."
     },
     "fixedrange": {
      "valType": "boolean",
      "dflt": false,
      "role": "info",
      "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled."
     },
     "tickmode": {
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ],
      "role": "info",
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
     },
     "nticks": {
      "valType": "integer",
      "min": 0,
      "dflt": 0,
      "role": "style",
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*."
     },
     "tick0": {
      "valType": "any",
      "role": "style",
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
     },
     "dtick": {
      "valType": "any",
      "role": "style",
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
     },
     "tickvals": {
      "valType": "data_array",
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "role": "data"
     },
     "ticktext": {
      "valType": "data_array",
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "role": "data"
     },
     "ticks": {
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ],
      "role": "style",
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
     },
     "mirror": {
      "valType": "enumerated",
      "values": [
       true,
       "ticks",
       false,
       "all",
       "allticks"
      ],
      "dflt": false,
      "role": "style",
      "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots."
     },
     "ticklen": {
      "valType": "number",
      "min": 0,
      "dflt": 5,
      "role": "style",
      "description": "Sets the tick length (in px)."
     },
     "tickwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the tick width (in px)."
     },
     "tickcolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the tick color."
     },
     "showticklabels": {
      "valType": "boolean",
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not the tick labels are drawn."
     },
     "tickfont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets the tick font.",
      "role": "object"
     },
     "tickangle": {
      "valType": "angle",
      "dflt": "auto",
      "role": "style",
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
     },
     "tickprefix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label prefix."
     },
     "showtickprefix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
     },
     "ticksuffix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label suffix."
     },
     "showticksuffix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "Same as `showtickprefix` but for tick suffixes."
     },
     "showexponent": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
     },
     "exponentformat": {
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ],
      "dflt": "B",
      "role": "style",
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
     },
     "separatethousands": {
      "valType": "boolean",
      "dflt": false,
      "role": "style",
      "description": "If \"true\", even 4-digit integers are separated"
     },
     "tickformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "hoverformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "showline": {
      "valType": "boolean",
      "dflt": false,
      "role": "style",
      "description": "Determines whether or not a line bounding this axis is drawn."
     },
     "linecolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the axis line color."
     },
     "linewidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the axis line."
     },
     "showgrid": {
      "valType": "boolean",
      "role": "style",
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
     },
     "gridcolor": {
      "valType": "color",
      "dflt": "rgb(204, 204, 204)",
      "role": "style",
      "description": "Sets the color of the grid lines."
     },
     "gridwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the grid lines."
     },
     "zeroline": {
      "valType": "boolean",
      "role": "style",
      "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
     },
     "zerolinecolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the line color of the zero line."
     },
     "zerolinewidth": {
      "valType": "number",
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the zero line."
     },
     "calendar": {
      "valType": "enumerated",
      "values": [
       "gregorian",
       "chinese",
       "coptic",
       "discworld",
       "ethiopian",
       "hebrew",
       "islamic",
       "julian",
       "mayan",
       "nanakshahi",
       "nepali",
       "persian",
       "jalali",
       "taiwan",
       "thai",
       "ummalqura"
      ],
      "role": "info",
      "dflt": "gregorian",
      "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`"
     },
     "role": "object",
     "categoryarraysrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  categoryarray ."
     },
     "tickvalssrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  tickvals ."
     },
     "ticktextsrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  ticktext ."
     }
    },
    "zaxis": {
     "showspikes": {
      "valType": "boolean",
      "role": "info",
      "dflt": true,
      "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover."
     },
     "spikesides": {
      "valType": "boolean",
      "role": "info",
      "dflt": true,
      "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover."
     },
     "spikethickness": {
      "valType": "number",
      "role": "style",
      "min": 0,
      "dflt": 2,
      "description": "Sets the thickness (in px) of the spikes."
     },
     "spikecolor": {
      "valType": "color",
      "role": "style",
      "dflt": "#444",
      "description": "Sets the color of the spikes."
     },
     "showbackground": {
      "valType": "boolean",
      "role": "info",
      "dflt": false,
      "description": "Sets whether or not this axis' wall has a background color."
     },
     "backgroundcolor": {
      "valType": "color",
      "role": "style",
      "dflt": "rgba(204, 204, 204, 0.5)",
      "description": "Sets the background color of this axis' wall."
     },
     "showaxeslabels": {
      "valType": "boolean",
      "role": "info",
      "dflt": true,
      "description": "Sets whether or not this axis is labeled"
     },
     "color": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this."
     },
     "categoryorder": {
      "valType": "enumerated",
      "values": [
       "trace",
       "category ascending",
       "category descending",
       "array"
      ],
      "dflt": "trace",
      "role": "info",
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`."
     },
     "categoryarray": {
      "valType": "data_array",
      "role": "data",
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."
     },
     "title": {
      "valType": "string",
      "role": "info",
      "description": "Sets the title of this axis."
     },
     "titlefont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets this axis' title font.",
      "role": "object"
     },
     "type": {
      "valType": "enumerated",
      "values": [
       "-",
       "linear",
       "log",
       "date",
       "category"
      ],
      "dflt": "-",
      "role": "info",
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question."
     },
     "autorange": {
      "valType": "enumerated",
      "values": [
       true,
       false,
       "reversed"
      ],
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*."
     },
     "rangemode": {
      "valType": "enumerated",
      "values": [
       "normal",
       "tozero",
       "nonnegative"
      ],
      "dflt": "normal",
      "role": "style",
      "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data."
     },
     "range": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "any"
       },
       {
        "valType": "any"
       }
      ],
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."
     },
     "fixedrange": {
      "valType": "boolean",
      "dflt": false,
      "role": "info",
      "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled."
     },
     "tickmode": {
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ],
      "role": "info",
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
     },
     "nticks": {
      "valType": "integer",
      "min": 0,
      "dflt": 0,
      "role": "style",
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*."
     },
     "tick0": {
      "valType": "any",
      "role": "style",
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
     },
     "dtick": {
      "valType": "any",
      "role": "style",
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
     },
     "tickvals": {
      "valType": "data_array",
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "role": "data"
     },
     "ticktext": {
      "valType": "data_array",
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "role": "data"
     },
     "ticks": {
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ],
      "role": "style",
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
     },
     "mirror": {
      "valType": "enumerated",
      "values": [
       true,
       "ticks",
       false,
       "all",
       "allticks"
      ],
      "dflt": false,
      "role": "style",
      "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots."
     },
     "ticklen": {
      "valType": "number",
      "min": 0,
      "dflt": 5,
      "role": "style",
      "description": "Sets the tick length (in px)."
     },
     "tickwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the tick width (in px)."
     },
     "tickcolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the tick color."
     },
     "showticklabels": {
      "valType": "boolean",
      "dflt": true,
      "role": "style",
      "description": "Determines whether or not the tick labels are drawn."
     },
     "tickfont": {
      "family": {
       "valType": "string",
       "role": "style",
       "noBlank": true,
       "strict": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
      },
      "size": {
       "valType": "number",
       "role": "style",
       "min": 1
      },
      "color": {
       "valType": "color",
       "role": "style"
      },
      "description": "Sets the tick font.",
      "role": "object"
     },
     "tickangle": {
      "valType": "angle",
      "dflt": "auto",
      "role": "style",
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically."
     },
     "tickprefix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label prefix."
     },
     "showtickprefix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden."
     },
     "ticksuffix": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets a tick label suffix."
     },
     "showticksuffix": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "Same as `showtickprefix` but for tick suffixes."
     },
     "showexponent": {
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ],
      "dflt": "all",
      "role": "style",
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear."
     },
     "exponentformat": {
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ],
      "dflt": "B",
      "role": "style",
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B."
     },
     "separatethousands": {
      "valType": "boolean",
      "dflt": false,
      "role": "style",
      "description": "If \"true\", even 4-digit integers are separated"
     },
     "tickformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "hoverformat": {
      "valType": "string",
      "dflt": "",
      "role": "style",
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format And for dates see: https://github.com/d3/d3-time-format/blob/master/README.md#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*"
     },
     "showline": {
      "valType": "boolean",
      "dflt": false,
      "role": "style",
      "description": "Determines whether or not a line bounding this axis is drawn."
     },
     "linecolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the axis line color."
     },
     "linewidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the axis line."
     },
     "showgrid": {
      "valType": "boolean",
      "role": "style",
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
     },
     "gridcolor": {
      "valType": "color",
      "dflt": "rgb(204, 204, 204)",
      "role": "style",
      "description": "Sets the color of the grid lines."
     },
     "gridwidth": {
      "valType": "number",
      "min": 0,
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the grid lines."
     },
     "zeroline": {
      "valType": "boolean",
      "role": "style",
      "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
     },
     "zerolinecolor": {
      "valType": "color",
      "dflt": "#444",
      "role": "style",
      "description": "Sets the line color of the zero line."
     },
     "zerolinewidth": {
      "valType": "number",
      "dflt": 1,
      "role": "style",
      "description": "Sets the width (in px) of the zero line."
     },
     "calendar": {
      "valType": "enumerated",
      "values": [
       "gregorian",
       "chinese",
       "coptic",
       "discworld",
       "ethiopian",
       "hebrew",
       "islamic",
       "julian",
       "mayan",
       "nanakshahi",
       "nepali",
       "persian",
       "jalali",
       "taiwan",
       "thai",
       "ummalqura"
      ],
      "role": "info",
      "dflt": "gregorian",
      "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`"
     },
     "role": "object",
     "categoryarraysrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  categoryarray ."
     },
     "tickvalssrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  tickvals ."
     },
     "ticktextsrc": {
      "valType": "string",
      "role": "info",
      "description": "Sets the source reference on plot.ly for  ticktext ."
     }
    },
    "dragmode": {
     "valType": "enumerated",
     "role": "info",
     "values": [
      "orbit",
      "turntable",
      "zoom",
      "pan"
     ],
     "dflt": "turntable",
     "description": "Determines the mode of drag interactions for this scene."
    },
    "hovermode": {
     "valType": "enumerated",
     "role": "info",
     "values": [
      "closest",
      false
     ],
     "dflt": "closest",
     "description": "Determines the mode of hover interactions for this scene."
    },
    "_deprecated": {
     "cameraposition": {
      "valType": "info_array",
      "role": "info",
      "description": "Obsolete. Use `camera` instead."
     }
    },
    "_isSubplotObj": true,
    "role": "object"
   },
   "geo": {
    "domain": {
     "x": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "number",
        "min": 0,
        "max": 1
       },
       {
        "valType": "number",
        "min": 0,
        "max": 1
       }
      ],
      "dflt": [
       0,
       1
      ],
      "description": "Sets the horizontal domain of this map (in plot fraction)."
     },
     "y": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "number",
        "min": 0,
        "max": 1
       },
       {
        "valType": "number",
        "min": 0,
        "max": 1
       }
      ],
      "dflt": [
       0,
       1
      ],
      "description": "Sets the vertical domain of this map (in plot fraction)."
     },
     "role": "object"
    },
    "resolution": {
     "valType": "enumerated",
     "values": [
      110,
      50
     ],
     "role": "info",
     "dflt": 110,
     "coerceNumber": true,
     "description": "Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000."
    },
    "scope": {
     "valType": "enumerated",
     "role": "info",
     "values": [
      "world",
      "usa",
      "europe",
      "asia",
      "africa",
      "north america",
      "south america"
     ],
     "dflt": "world",
     "description": "Set the scope of the map."
    },
    "projection": {
     "type": {
      "valType": "enumerated",
      "role": "info",
      "values": [
       "equirectangular",
       "mercator",
       "orthographic",
       "natural earth",
       "kavrayskiy7",
       "miller",
       "robinson",
       "eckert4",
       "azimuthal equal area",
       "azimuthal equidistant",
       "conic equal area",
       "conic conformal",
       "conic equidistant",
       "gnomonic",
       "stereographic",
       "mollweide",
       "hammer",
       "transverse mercator",
       "albers usa",
       "winkel tripel"
      ],
      "description": "Sets the projection type."
     },
     "rotation": {
      "lon": {
       "valType": "number",
       "role": "info",
       "description": "Rotates the map along parallels (in degrees East)."
      },
      "lat": {
       "valType": "number",
       "role": "info",
       "description": "Rotates the map along meridians (in degrees North)."
      },
      "roll": {
       "valType": "number",
       "role": "info",
       "description": "Roll the map (in degrees) For example, a roll of *180* makes the map appear upside down."
      },
      "role": "object"
     },
     "parallels": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "number"
       },
       {
        "valType": "number"
       }
      ],
      "description": "For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere."
     },
     "scale": {
      "valType": "number",
      "role": "info",
      "min": 0,
      "max": 10,
      "dflt": 1,
      "description": "Zooms in or out on the map view."
     },
     "role": "object"
    },
    "showcoastlines": {
     "valType": "boolean",
     "role": "info",
     "description": "Sets whether or not the coastlines are drawn."
    },
    "coastlinecolor": {
     "valType": "color",
     "role": "style",
     "dflt": "#444",
     "description": "Sets the coastline color."
    },
    "coastlinewidth": {
     "valType": "number",
     "role": "style",
     "min": 0,
     "dflt": 1,
     "description": "Sets the coastline stroke width (in px)."
    },
    "showland": {
     "valType": "boolean",
     "role": "info",
     "dflt": false,
     "description": "Sets whether or not land masses are filled in color."
    },
    "landcolor": {
     "valType": "color",
     "role": "style",
     "dflt": "#F0DC82",
     "description": "Sets the land mass color."
    },
    "showocean": {
     "valType": "boolean",
     "role": "info",
     "dflt": false,
     "description": "Sets whether or not oceans are filled in color."
    },
    "oceancolor": {
     "valType": "color",
     "role": "style",
     "dflt": "#3399FF",
     "description": "Sets the ocean color"
    },
    "showlakes": {
     "valType": "boolean",
     "role": "info",
     "dflt": false,
     "description": "Sets whether or not lakes are drawn."
    },
    "lakecolor": {
     "valType": "color",
     "role": "style",
     "dflt": "#3399FF",
     "description": "Sets the color of the lakes."
    },
    "showrivers": {
     "valType": "boolean",
     "role": "info",
     "dflt": false,
     "description": "Sets whether or not rivers are drawn."
    },
    "rivercolor": {
     "valType": "color",
     "role": "style",
     "dflt": "#3399FF",
     "description": "Sets color of the rivers."
    },
    "riverwidth": {
     "valType": "number",
     "role": "style",
     "min": 0,
     "dflt": 1,
     "description": "Sets the stroke width (in px) of the rivers."
    },
    "showcountries": {
     "valType": "boolean",
     "role": "info",
     "description": "Sets whether or not country boundaries are drawn."
    },
    "countrycolor": {
     "valType": "color",
     "role": "style",
     "dflt": "#444",
     "description": "Sets line color of the country boundaries."
    },
    "countrywidth": {
     "valType": "number",
     "role": "style",
     "min": 0,
     "dflt": 1,
     "description": "Sets line width (in px) of the country boundaries."
    },
    "showsubunits": {
     "valType": "boolean",
     "role": "info",
     "description": "Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn."
    },
    "subunitcolor": {
     "valType": "color",
     "role": "style",
     "dflt": "#444",
     "description": "Sets the color of the subunits boundaries."
    },
    "subunitwidth": {
     "valType": "number",
     "role": "style",
     "min": 0,
     "dflt": 1,
     "description": "Sets the stroke width (in px) of the subunits boundaries."
    },
    "showframe": {
     "valType": "boolean",
     "role": "info",
     "description": "Sets whether or not a frame is drawn around the map."
    },
    "framecolor": {
     "valType": "color",
     "role": "style",
     "dflt": "#444",
     "description": "Sets the color the frame."
    },
    "framewidth": {
     "valType": "number",
     "role": "style",
     "min": 0,
     "dflt": 1,
     "description": "Sets the stroke width (in px) of the frame."
    },
    "bgcolor": {
     "valType": "color",
     "role": "style",
     "dflt": "#fff",
     "description": "Set the background color of the map"
    },
    "lonaxis": {
     "range": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "number"
       },
       {
        "valType": "number"
       }
      ],
      "description": "Sets the range of this axis (in degrees)."
     },
     "showgrid": {
      "valType": "boolean",
      "role": "info",
      "dflt": false,
      "description": "Sets whether or not graticule are shown on the map."
     },
     "tick0": {
      "valType": "number",
      "role": "info",
      "description": "Sets the graticule's starting tick longitude/latitude."
     },
     "dtick": {
      "valType": "number",
      "role": "info",
      "description": "Sets the graticule's longitude/latitude tick step."
     },
     "gridcolor": {
      "valType": "color",
      "role": "style",
      "dflt": "#eee",
      "description": "Sets the graticule's stroke color."
     },
     "gridwidth": {
      "valType": "number",
      "role": "style",
      "min": 0,
      "dflt": 1,
      "description": "Sets the graticule's stroke width (in px)."
     },
     "role": "object"
    },
    "lataxis": {
     "range": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "number"
       },
       {
        "valType": "number"
       }
      ],
      "description": "Sets the range of this axis (in degrees)."
     },
     "showgrid": {
      "valType": "boolean",
      "role": "info",
      "dflt": false,
      "description": "Sets whether or not graticule are shown on the map."
     },
     "tick0": {
      "valType": "number",
      "role": "info",
      "description": "Sets the graticule's starting tick longitude/latitude."
     },
     "dtick": {
      "valType": "number",
      "role": "info",
      "description": "Sets the graticule's longitude/latitude tick step."
     },
     "gridcolor": {
      "valType": "color",
      "role": "style",
      "dflt": "#eee",
      "description": "Sets the graticule's stroke color."
     },
     "gridwidth": {
      "valType": "number",
      "role": "style",
      "min": 0,
      "dflt": 1,
      "description": "Sets the graticule's stroke width (in px)."
     },
     "role": "object"
    },
    "_isSubplotObj": true,
    "role": "object"
   },
   "mapbox": {
    "domain": {
     "x": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "number",
        "min": 0,
        "max": 1
       },
       {
        "valType": "number",
        "min": 0,
        "max": 1
       }
      ],
      "dflt": [
       0,
       1
      ],
      "description": "Sets the horizontal domain of this subplot (in plot fraction)."
     },
     "y": {
      "valType": "info_array",
      "role": "info",
      "items": [
       {
        "valType": "number",
        "min": 0,
        "max": 1
       },
       {
        "valType": "number",
        "min": 0,
        "max": 1
       }
      ],
      "dflt": [
       0,
       1
      ],
      "description": "Sets the vertical domain of this subplot (in plot fraction)."
     },
     "role": "object"
    },
    "accesstoken": {
     "valType": "string",
     "noBlank": true,
     "strict": true,
     "role": "info",
     "description": "Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`."
    },
    "style": {
     "valType": "any",
     "values": [
      "basic",
      "streets",
      "outdoors",
      "light",
      "dark",
      "satellite",
      "satellite-streets"
     ],
     "dflt": "basic",
     "role": "style",
     "description": "Sets the Mapbox map style. Either input one of the default Mapbox style names or the URL to a custom style or a valid Mapbox style JSON."
    },
    "center": {
     "lon": {
      "valType": "number",
      "dflt": 0,
      "role": "info",
      "description": "Sets the longitude of the center of the map (in degrees East)."
     },
     "lat": {
      "valType": "number",
      "dflt": 0,
      "role": "info",
      "description": "Sets the latitude of the center of the map (in degrees North)."
     },
     "role": "object"
    },
    "zoom": {
     "valType": "number",
     "dflt": 1,
     "role": "info",
     "description": "Sets the zoom level of the map."
    },
    "bearing": {
     "valType": "number",
     "dflt": 0,
     "role": "info",
     "description": "Sets the bearing angle of the map (in degrees counter-clockwise from North)."
    },
    "pitch": {
     "valType": "number",
     "dflt": 0,
     "role": "info",
     "description": "Sets the pitch angle of the map (in degrees, where *0* means perpendicular to the surface of the map)."
    },
    "layers": {
     "items": {
      "layer": {
       "sourcetype": {
        "valType": "enumerated",
        "values": [
         "geojson",
         "vector"
        ],
        "dflt": "geojson",
        "role": "info",
        "description": "Sets the source type for this layer. Support for *raster*, *image* and *video* source types is coming soon."
       },
       "source": {
        "valType": "any",
        "role": "info",
        "description": "Sets the source data for this layer. Source can be either a URL, a geojson object (with `sourcetype` set to *geojson*) or an array of tile URLS (with `sourcetype` set to *vector*)."
       },
       "sourcelayer": {
        "valType": "string",
        "dflt": "",
        "role": "info",
        "description": "Specifies the layer to use from a vector tile source. Required for *vector* source type that supports multiple layers."
       },
       "type": {
        "valType": "enumerated",
        "values": [
         "circle",
         "line",
         "fill",
         "symbol"
        ],
        "dflt": "circle",
        "role": "info",
        "description": "Sets the layer type. Support for *raster*, *background* types is coming soon. Note that *line* and *fill* are not compatible with Point GeoJSON geometries."
       },
       "below": {
        "valType": "string",
        "dflt": "",
        "role": "info",
        "description": "Determines if the layer will be inserted before the layer with the specified ID. If omitted or set to '', the layer will be inserted above every existing layer."
       },
       "color": {
        "valType": "color",
        "dflt": "#444",
        "role": "style",
        "description": "Sets the primary layer color. If `type` is *circle*, color corresponds to the circle color If `type` is *line*, color corresponds to the line color If `type` is *fill*, color corresponds to the fill color If `type` is *symbol*, color corresponds to the icon color"
       },
       "opacity": {
        "valType": "number",
        "min": 0,
        "max": 1,
        "dflt": 1,
        "role": "info",
        "description": "Sets the opacity of the layer."
       },
       "circle": {
        "radius": {
         "valType": "number",
         "dflt": 15,
         "role": "style",
         "description": "Sets the circle radius. Has an effect only when `type` is set to *circle*."
        },
        "role": "object"
       },
       "line": {
        "width": {
         "valType": "number",
         "dflt": 2,
         "role": "style",
         "description": "Sets the line width. Has an effect only when `type` is set to *line*."
        },
        "role": "object"
       },
       "fill": {
        "outlinecolor": {
         "valType": "color",
         "dflt": "#444",
         "role": "style",
         "description": "Sets the fill outline color. Has an effect only when `type` is set to *fill*."
        },
        "role": "object"
       },
       "symbol": {
        "icon": {
         "valType": "string",
         "dflt": "marker",
         "role": "style",
         "description": "Sets the symbol icon image. Full list: https://www.mapbox.com/maki-icons/"
        },
        "iconsize": {
         "valType": "number",
         "dflt": 10,
         "role": "style",
         "description": "Sets the symbol icon size. Has an effect only when `type` is set to *symbol*."
        },
        "text": {
         "valType": "string",
         "dflt": "",
         "role": "info",
         "description": "Sets the symbol text."
        },
        "textfont": {
         "family": {
          "valType": "string",
          "role": "style",
          "noBlank": true,
          "strict": true,
          "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
          "dflt": "Open Sans Regular, Arial Unicode MS Regular"
         },
         "size": {
          "valType": "number",
          "role": "style",
          "min": 1
         },
         "color": {
          "valType": "color",
          "role": "style"
         },
         "description": "Sets the icon text font. Has an effect only when `type` is set to *symbol*.",
         "role": "object"
        },
        "textposition": {
         "valType": "enumerated",
         "values": [
          "top left",
          "top center",
          "top right",
          "middle left",
          "middle center",
          "middle right",
          "bottom left",
          "bottom center",
          "bottom right"
         ],
         "dflt": "middle center",
         "arrayOk": false,
         "role": "style",
         "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates."
        },
        "role": "object"
       },
       "role": "object"
      }
     },
     "role": "object"
    },
    "_isSubplotObj": true,
    "role": "object"
   },
   "radialaxis": {
    "range": {
     "valType": "info_array",
     "role": "info",
     "items": [
      {
       "valType": "number"
      },
      {
       "valType": "number"
      }
     ],
     "description": "Defines the start and end point of this radial axis."
    },
    "domain": {
     "valType": "info_array",
     "role": "info",
     "items": [
      {
       "valType": "number",
       "min": 0,
       "max": 1
      },
      {
       "valType": "number",
       "min": 0,
       "max": 1
      }
     ],
     "dflt": [
      0,
      1
     ],
     "description": "Polar chart subplots are not supported yet. This key has currently no effect."
    },
    "orientation": {
     "valType": "number",
     "role": "style",
     "description": "Sets the orientation (an angle with respect to the origin) of the radial axis."
    },
    "showline": {
     "valType": "boolean",
     "role": "style",
     "description": "Determines whether or not the line bounding this radial axis will be shown on the figure."
    },
    "showticklabels": {
     "valType": "boolean",
     "role": "style",
     "description": "Determines whether or not the radial axis ticks will feature tick labels."
    },
    "tickorientation": {
     "valType": "enumerated",
     "values": [
      "horizontal",
      "vertical"
     ],
     "role": "style",
     "description": "Sets the orientation (from the paper perspective) of the radial axis tick labels."
    },
    "ticklen": {
     "valType": "number",
     "min": 0,
     "role": "style",
     "description": "Sets the length of the tick lines on this radial axis."
    },
    "tickcolor": {
     "valType": "color",
     "role": "style",
     "description": "Sets the color of the tick lines on this radial axis."
    },
    "ticksuffix": {
     "valType": "string",
     "role": "style",
     "description": "Sets the length of the tick lines on this radial axis."
    },
    "endpadding": {
     "valType": "number",
     "role": "style"
    },
    "visible": {
     "valType": "boolean",
     "role": "info",
     "description": "Determines whether or not this axis will be visible."
    },
    "role": "object"
   },
   "angularaxis": {
    "range": {
     "valType": "info_array",
     "role": "info",
     "items": [
      {
       "valType": "number",
       "dflt": 0
      },
      {
       "valType": "number",
       "dflt": 360
      }
     ],
     "description": "Defines the start and end point of this angular axis."
    },
    "domain": {
     "valType": "info_array",
     "role": "info",
     "items": [
      {
       "valType": "number",
       "min": 0,
       "max": 1
      },
      {
       "valType": "number",
       "min": 0,
       "max": 1
      }
     ],
     "dflt": [
      0,
      1
     ],
     "description": "Polar chart subplots are not supported yet. This key has currently no effect."
    },
    "showline": {
     "valType": "boolean",
     "role": "style",
     "description": "Determines whether or not the line bounding this angular axis will be shown on the figure."
    },
    "showticklabels": {
     "valType": "boolean",
     "role": "style",
     "description": "Determines whether or not the angular axis ticks will feature tick labels."
    },
    "tickorientation": {
     "valType": "enumerated",
     "values": [
      "horizontal",
      "vertical"
     ],
     "role": "style",
     "description": "Sets the orientation (from the paper perspective) of the angular axis tick labels."
    },
    "ticklen": {
     "valType": "number",
     "min": 0,
     "role": "style",
     "description": "Sets the length of the tick lines on this angular axis."
    },
    "tickcolor": {
     "valType": "color",
     "role": "style",
     "description": "Sets the color of the tick lines on this angular axis."
    },
    "ticksuffix": {
     "valType": "string",
     "role": "style",
     "description": "Sets the length of the tick lines on this angular axis."
    },
    "endpadding": {
     "valType": "number",
     "role": "style"
    },
    "visible": {
     "valType": "boolean",
     "role": "info",
     "description": "Determines whether or not this axis will be visible."
    },
    "role": "object"
   },
   "direction": {
    "valType": "enumerated",
    "values": [
     "clockwise",
     "counterclockwise"
    ],
    "role": "info",
    "description": "For polar plots only. Sets the direction corresponding to positive angles."
   },
   "orientation": {
    "valType": "angle",
    "role": "info",
    "description": "For polar plots only. Rotates the entire polar by the given angle."
   },
   "legend": {
    "bgcolor": {
     "valType": "color",
     "role": "style",
     "description": "Sets the legend background color."
    },
    "bordercolor": {
     "valType": "color",
     "dflt": "#444",
     "role": "style",
     "description": "Sets the color of the border enclosing the legend."
    },
    "borderwidth": {
     "valType": "number",
     "min": 0,
     "dflt": 0,
     "role": "style",
     "description": "Sets the width (in px) of the border enclosing the legend."
    },
    "font": {
     "family": {
      "valType": "string",
      "role": "style",
      "noBlank": true,
      "strict": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
     },
     "size": {
      "valType": "number",
      "role": "style",
      "min": 1
     },
     "color": {
      "valType": "color",
      "role": "style"
     },
     "description": "Sets the font used to text the legend items.",
     "role": "object"
    },
    "orientation": {
     "valType": "enumerated",
     "values": [
      "v",
      "h"
     ],
     "dflt": "v",
     "role": "info",
     "description": "Sets the orientation of the legend."
    },
    "traceorder": {
     "valType": "flaglist",
     "flags": [
      "reversed",
      "grouped"
     ],
     "extras": [
      "normal"
     ],
     "role": "style",
     "description": "Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*."
    },
    "tracegroupgap": {
     "valType": "number",
     "min": 0,
     "dflt": 10,
     "role": "style",
     "description": "Sets the amount of vertical space (in px) between legend groups."
    },
    "x": {
     "valType": "number",
     "min": -2,
     "max": 3,
     "dflt": 1.02,
     "role": "style",
     "description": "Sets the x position (in normalized coordinates) of the legend."
    },
    "xanchor": {
     "valType": "enumerated",
     "values": [
      "auto",
      "left",
      "center",
      "right"
     ],
     "dflt": "left",
     "role": "info",
     "description": "Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend."
    },
    "y": {
     "valType": "number",
     "min": -2,
     "max": 3,
     "dflt": 1,
     "role": "style",
     "description": "Sets the y position (in normalized coordinates) of the legend."
    },
    "yanchor": {
     "valType": "enumerated",
     "values": [
      "auto",
      "top",
      "middle",
      "bottom"
     ],
     "dflt": "auto",
     "role": "info",
     "description": "Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend."
    },
    "role": "object"
   },
   "annotations": {
    "items": {
     "annotation": {
      "visible": {
       "valType": "boolean",
       "role": "info",
       "dflt": true,
       "description": "Determines whether or not this annotation is visible."
      },
      "text": {
       "valType": "string",
       "role": "info",
       "description": "Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (
), bold (), italics (), hyperlinks (). Tags , ,   are also supported."
      },
      "textangle": {
       "valType": "angle",
       "dflt": 0,
       "role": "style",
       "description": "Sets the angle at which the `text` is drawn with respect to the horizontal."
      },
      "font": {
       "family": {
        "valType": "string",
        "role": "style",
        "noBlank": true,
        "strict": true,
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
       },
       "size": {
        "valType": "number",
        "role": "style",
        "min": 1
       },
       "color": {
        "valType": "color",
        "role": "style"
       },
       "description": "Sets the annotation text font.",
       "role": "object"
      },
      "opacity": {
       "valType": "number",
       "min": 0,
       "max": 1,
       "dflt": 1,
       "role": "style",
       "description": "Sets the opacity of the annotation (text + arrow)."
      },
      "align": {
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ],
       "dflt": "center",
       "role": "style",
       "description": "Sets the vertical alignment of the `text` with respect to the set `x` and `y` position. Has only an effect if `text` spans more two or more lines (i.e. `text` contains one or more 
 HTML tags)."
      },
      "bgcolor": {
       "valType": "color",
       "dflt": "rgba(0,0,0,0)",
       "role": "style",
       "description": "Sets the background color of the annotation."
      },
      "bordercolor": {
       "valType": "color",
       "dflt": "rgba(0,0,0,0)",
       "role": "style",
       "description": "Sets the color of the border enclosing the annotation `text`."
      },
      "borderpad": {
       "valType": "number",
       "min": 0,
       "dflt": 1,
       "role": "style",
       "description": "Sets the padding (in px) between the `text` and the enclosing border."
      },
      "borderwidth": {
       "valType": "number",
       "min": 0,
       "dflt": 1,
       "role": "style",
       "description": "Sets the width (in px) of the border enclosing the annotation `text`."
      },
      "showarrow": {
       "valType": "boolean",
       "dflt": true,
       "role": "style",
       "description": "Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided."
      },
      "arrowcolor": {
       "valType": "color",
       "role": "style",
       "description": "Sets the color of the annotation arrow."
      },
      "arrowhead": {
       "valType": "integer",
       "min": 0,
       "max": 8,
       "dflt": 1,
       "role": "style",
       "description": "Sets the annotation arrow head style."
      },
      "arrowsize": {
       "valType": "number",
       "min": 0.3,
       "dflt": 1,
       "role": "style",
       "description": "Sets the size (in px) of annotation arrow head."
      },
      "arrowwidth": {
       "valType": "number",
       "min": 0.1,
       "role": "style",
       "description": "Sets the width (in px) of annotation arrow."
      },
      "ax": {
       "valType": "any",
       "role": "info",
       "description": "Sets the x component of the arrow tail about the arrow head. If `axref` is `pixel`, a positive (negative)  component corresponds to an arrow pointing from right to left (left to right). If `axref` is an axis, this is an absolute value on that axis, like `x`, NOT a relative value."
      },
      "ay": {
       "valType": "any",
       "role": "info",
       "description": "Sets the y component of the arrow tail about the arrow head. If `ayref` is `pixel`, a positive (negative)  component corresponds to an arrow pointing from bottom to top (top to bottom). If `ayref` is an axis, this is an absolute value on that axis, like `y`, NOT a relative value."
      },
      "axref": {
       "valType": "enumerated",
       "dflt": "pixel",
       "values": [
        "pixel",
        "/^x([2-9]|[1-9][0-9]+)?$/"
       ],
       "role": "info",
       "description": "Indicates in what terms the tail of the annotation (ax,ay)  is specified. If `pixel`, `ax` is a relative offset in pixels  from `x`. If set to an x axis id (e.g. *x* or *x2*), `ax` is  specified in the same terms as that axis. This is useful  for trendline annotations which should continue to indicate  the correct trend when zoomed."
      },
      "ayref": {
       "valType": "enumerated",
       "dflt": "pixel",
       "values": [
        "pixel",
        "/^y([2-9]|[1-9][0-9]+)?$/"
       ],
       "role": "info",
       "description": "Indicates in what terms the tail of the annotation (ax,ay)  is specified. If `pixel`, `ay` is a relative offset in pixels  from `y`. If set to a y axis id (e.g. *y* or *y2*), `ay` is  specified in the same terms as that axis. This is useful  for trendline annotations which should continue to indicate  the correct trend when zoomed."
      },
      "xref": {
       "valType": "enumerated",
       "values": [
        "paper",
        "/^x([2-9]|[1-9][0-9]+)?$/"
       ],
       "role": "info",
       "description": "Sets the annotation's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where 0 (1) corresponds to the left (right) side."
      },
      "x": {
       "valType": "any",
       "role": "info",
       "description": "Sets the annotation's x position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."
      },
      "xanchor": {
       "valType": "enumerated",
       "values": [
        "auto",
        "left",
        "center",
        "right"
       ],
       "dflt": "auto",
       "role": "info",
       "description": "Sets the annotation's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations whereas for paper-referenced, the anchor picked corresponds to the closest side."
      },
      "yref": {
       "valType": "enumerated",
       "values": [
        "paper",
        "/^y([2-9]|[1-9][0-9]+)?$/"
       ],
       "role": "info",
       "description": "Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where 0 (1) corresponds to the bottom (top)."
      },
      "y": {
       "valType": "any",
       "role": "info",
       "description": "Sets the annotation's y position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears."
      },
      "yanchor": {
       "valType": "enumerated",
       "values": [
        "auto",
        "top",
        "middle",
        "bottom"
       ],
       "dflt": "auto",
       "role": "info",
       "description": "Sets the annotation's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations whereas for paper-referenced, the anchor picked corresponds to the closest side."
      },
      "_deprecated": {
       "ref": {
        "valType": "string",
        "role": "info",
        "description": "Obsolete. Set `xref` and `yref` separately instead."
       }
      },
      "role": "object"
     }
    },
    "role": "object"
   },
   "shapes": {
    "items": {
     "shape": {
      "visible": {
       "valType": "boolean",
       "role": "info",
       "dflt": true,
       "description": "Determines whether or not this shape is visible."
      },
      "type": {
       "valType": "enumerated",
       "values": [
        "circle",
        "rect",
        "path",
        "line"
       ],
       "role": "info",
       "description": "Specifies the shape type to be drawn. If *line*, a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) If *circle*, a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) If *rect*, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`) If *path*, draw a custom SVG path using `path`."
      },
      "layer": {
       "valType": "enumerated",
       "values": [
        "below",
        "above"
       ],
       "dflt": "above",
       "role": "info",
       "description": "Specifies whether shapes are drawn below or above traces."
      },
      "xref": {
       "valType": "enumerated",
       "values": [
        "paper",
        "/^x([2-9]|[1-9][0-9]+)?$/"
       ],
       "role": "info",
       "description": "Sets the shape's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right) side. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, then you must convert the date to unix time in milliseconds."
      },
      "x0": {
       "valType": "any",
       "role": "info",
       "description": "Sets the shape's starting x position. See `type` for more info."
      },
      "x1": {
       "valType": "any",
       "role": "info",
       "description": "Sets the shape's end x position. See `type` for more info."
      },
      "yref": {
       "valType": "enumerated",
       "values": [
        "paper",
        "/^y([2-9]|[1-9][0-9]+)?$/"
       ],
       "role": "info",
       "description": "Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top)."
      },
      "y0": {
       "valType": "any",
       "role": "info",
       "description": "Sets the shape's starting y position. See `type` for more info."
      },
      "y1": {
       "valType": "any",
       "role": "info",
       "description": "Sets the shape's end y position. See `type` for more info."
      },
      "path": {
       "valType": "string",
       "role": "info",
       "description": "For `type` *path* - a valid SVG path but with the pixel values replaced by data values. There are a few restrictions / quirks only absolute instructions, not relative. So the allowed segments are: M, L, H, V, Q, C, T, S, and Z arcs (A) are not allowed because radius rx and ry are relative. In the future we could consider supporting relative commands, but we would have to decide on how to handle date and log axes. Note that even as is, Q and C Bezier paths that are smooth on linear axes may not be smooth on log, and vice versa. no chained \"polybezier\" commands - specify the segment type for each one. On category axes, values are numbers scaled to the serial numbers of categories because using the categories themselves there would be no way to describe fractional positions On data axes: because space and T are both normal components of path strings, we can't use either to separate date from time parts. Therefore we'll use underscore for this purpose: 2015-02-21_13:45:56.789"
      },
      "opacity": {
       "valType": "number",
       "min": 0,
       "max": 1,
       "dflt": 1,
       "role": "info",
       "description": "Sets the opacity of the shape."
      },
      "line": {
       "color": {
        "valType": "color",
        "role": "style",
        "description": "Sets the line color."
       },
       "width": {
        "valType": "number",
        "min": 0,
        "dflt": 2,
        "role": "style",
        "description": "Sets the line width (in px)."
       },
       "dash": {
        "valType": "string",
        "values": [
         "solid",
         "dot",
         "dash",
         "longdash",
         "dashdot",
         "longdashdot"
        ],
        "dflt": "solid",
        "role": "style",
        "description": "Sets the style of the lines. Set to a dash string type or a dash length in px."
       },
       "role": "object"
      },
      "fillcolor": {
       "valType": "color",
       "dflt": "rgba(0,0,0,0)",
       "role": "info",
       "description": "Sets the color filling the shape's interior."
      },
      "role": "object"
     }
    },
    "role": "object"
   },
   "images": {
    "items": {
     "image": {
      "visible": {
       "valType": "boolean",
       "role": "info",
       "dflt": true,
       "description": "Determines whether or not this image is visible."
      },
      "source": {
       "valType": "string",
       "role": "info",
       "description": "Specifies the URL of the image to be used. The URL must be accessible from the domain where the plot code is run, and can be either relative or absolute."
      },
      "layer": {
       "valType": "enumerated",
       "values": [
        "below",
        "above"
       ],
       "dflt": "above",
       "role": "info",
       "description": "Specifies whether images are drawn below or above traces. When `xref` and `yref` are both set to `paper`, image is drawn below the entire plot area."
      },
      "sizex": {
       "valType": "number",
       "role": "info",
       "dflt": 0,
       "description": "Sets the image container size horizontally. The image will be sized based on the `position` value. When `xref` is set to `paper`, units are sized relative to the plot width."
      },
      "sizey": {
       "valType": "number",
       "role": "info",
       "dflt": 0,
       "description": "Sets the image container size vertically. The image will be sized based on the `position` value. When `yref` is set to `paper`, units are sized relative to the plot height."
      },
      "sizing": {
       "valType": "enumerated",
       "values": [
        "fill",
        "contain",
        "stretch"
       ],
       "dflt": "contain",
       "role": "info",
       "description": "Specifies which dimension of the image to constrain."
      },
      "opacity": {
       "valType": "number",
       "role": "info",
       "min": 0,
       "max": 1,
       "dflt": 1,
       "description": "Sets the opacity of the image."
      },
      "x": {
       "valType": "any",
       "role": "info",
       "dflt": 0,
       "description": "Sets the image's x position. When `xref` is set to `paper`, units are sized relative to the plot height. See `xref` for more info"
      },
      "y": {
       "valType": "any",
       "role": "info",
       "dflt": 0,
       "description": "Sets the image's y position. When `yref` is set to `paper`, units are sized relative to the plot height. See `yref` for more info"
      },
      "xanchor": {
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ],
       "dflt": "left",
       "role": "info",
       "description": "Sets the anchor for the x position"
      },
      "yanchor": {
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ],
       "dflt": "top",
       "role": "info",
       "description": "Sets the anchor for the y position."
      },
      "xref": {
       "valType": "enumerated",
       "values": [
        "paper",
        "/^x([2-9]|[1-9][0-9]+)?$/"
       ],
       "dflt": "paper",
       "role": "info",
       "description": "Sets the images's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to an x data coordinate If set to *paper*, the `x` position refers to the distance from the left of plot in normalized coordinates where *0* (*1*) corresponds to the left (right)."
      },
      "yref": {
       "valType": "enumerated",
       "values": [
        "paper",
        "/^y([2-9]|[1-9][0-9]+)?$/"
       ],
       "dflt": "paper",
       "role": "info",
       "description": "Sets the images's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y data coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plot in normalized coordinates where *0* (*1*) corresponds to the bottom (top)."
      },
      "role": "object"
     }
    },
    "role": "object"
   },
   "updatemenus": {
    "items": {
     "updatemenu": {
      "visible": {
       "valType": "boolean",
       "role": "info",
       "description": "Determines whether or not the update menu is visible."
      },
      "type": {
       "valType": "enumerated",
       "values": [
        "dropdown",
        "buttons"
       ],
       "dflt": "dropdown",
       "role": "info",
       "description": "Determines whether the buttons are accessible via a dropdown menu or whether the buttons are stacked horizontally or vertically"
      },
      "direction": {
       "valType": "enumerated",
       "values": [
        "left",
        "right",
        "up",
        "down"
       ],
       "dflt": "down",
       "role": "info",
       "description": "Determines the direction in which the buttons are laid out, whether in a dropdown menu or a row/column of buttons. For `left` and `up`, the buttons will still appear in left-to-right or top-to-bottom order respectively."
      },
      "active": {
       "valType": "integer",
       "role": "info",
       "min": -1,
       "dflt": 0,
       "description": "Determines which button (by index starting from 0) is considered active."
      },
      "showactive": {
       "valType": "boolean",
       "role": "info",
       "dflt": true,
       "description": "Highlights active dropdown item or active button if true."
      },
      "buttons": {
       "items": {
        "button": {
         "method": {
          "valType": "enumerated",
          "values": [
           "restyle",
           "relayout",
           "animate",
           "update"
          ],
          "dflt": "restyle",
          "role": "info",
          "description": "Sets the Plotly method to be called on click."
         },
         "args": {
          "valType": "info_array",
          "role": "info",
          "freeLength": true,
          "items": [
           {
            "valType": "any"
           },
           {
            "valType": "any"
           },
           {
            "valType": "any"
           }
          ],
          "description": "Sets the arguments values to be passed to the Plotly method set in `method` on click."
         },
         "label": {
          "valType": "string",
          "role": "info",
          "dflt": "",
          "description": "Sets the text label to appear on the button."
         },
         "role": "object"
        }
       },
       "role": "object"
      },
      "x": {
       "valType": "number",
       "min": -2,
       "max": 3,
       "dflt": -0.05,
       "role": "style",
       "description": "Sets the x position (in normalized coordinates) of the update menu."
      },
      "xanchor": {
       "valType": "enumerated",
       "values": [
        "auto",
        "left",
        "center",
        "right"
       ],
       "dflt": "right",
       "role": "info",
       "description": "Sets the update menu's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector."
      },
      "y": {
       "valType": "number",
       "min": -2,
       "max": 3,
       "dflt": 1,
       "role": "style",
       "description": "Sets the y position (in normalized coordinates) of the update menu."
      },
      "yanchor": {
       "valType": "enumerated",
       "values": [
        "auto",
        "top",
        "middle",
        "bottom"
       ],
       "dflt": "top",
       "role": "info",
       "description": "Sets the update menu's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector."
      },
      "pad": {
       "t": {
        "valType": "number",
        "dflt": 0,
        "role": "style",
        "description": "The amount of padding (in px) along the top of the component."
       },
       "r": {
        "valType": "number",
        "dflt": 0,
        "role": "style",
        "description": "The amount of padding (in px) on the right side of the component."
       },
       "b": {
        "valType": "number",
        "dflt": 0,
        "role": "style",
        "description": "The amount of padding (in px) along the bottom of the component."
       },
       "l": {
        "valType": "number",
        "dflt": 0,
        "role": "style",
        "description": "The amount of padding (in px) on the left side of the component."
       },
       "description": "Sets the padding around the buttons or dropdown menu.",
       "role": "object"
      },
      "font": {
       "family": {
        "valType": "string",
        "role": "style",
        "noBlank": true,
        "strict": true,
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
       },
       "size": {
        "valType": "number",
        "role": "style",
        "min": 1
       },
       "color": {
        "valType": "color",
        "role": "style"
       },
       "description": "Sets the font of the update menu button text.",
       "role": "object"
      },
      "bgcolor": {
       "valType": "color",
       "role": "style",
       "description": "Sets the background color of the update menu buttons."
      },
      "bordercolor": {
       "valType": "color",
       "dflt": "#BEC8D9",
       "role": "style",
       "description": "Sets the color of the border enclosing the update menu."
      },
      "borderwidth": {
       "valType": "number",
       "min": 0,
       "dflt": 1,
       "role": "style",
       "description": "Sets the width (in px) of the border enclosing the update menu."
      },
      "role": "object"
     }
    },
    "role": "object"
   },
   "sliders": {
    "items": {
     "slider": {
      "visible": {
       "valType": "boolean",
       "role": "info",
       "dflt": true,
       "description": "Determines whether or not the slider is visible."
      },
      "active": {
       "valType": "number",
       "role": "info",
       "min": 0,
       "dflt": 0,
       "description": "Determines which button (by index starting from 0) is considered active."
      },
      "steps": {
       "items": {
        "step": {
         "method": {
          "valType": "enumerated",
          "values": [
           "restyle",
           "relayout",
           "animate",
           "update"
          ],
          "dflt": "restyle",
          "role": "info",
          "description": "Sets the Plotly method to be called when the slider value is changed."
         },
         "args": {
          "valType": "info_array",
          "role": "info",
          "freeLength": true,
          "items": [
           {
            "valType": "any"
           },
           {
            "valType": "any"
           },
           {
            "valType": "any"
           }
          ],
          "description": "Sets the arguments values to be passed to the Plotly method set in `method` on slide."
         },
         "label": {
          "valType": "string",
          "role": "info",
          "description": "Sets the text label to appear on the slider"
         },
         "value": {
          "valType": "string",
          "role": "info",
          "description": "Sets the value of the slider step, used to refer to the step programatically. Defaults to the slider label if not provided."
         },
         "role": "object"
        }
       },
       "role": "object"
      },
      "lenmode": {
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ],
       "role": "info",
       "dflt": "fraction",
       "description": "Determines whether this slider length is set in units of plot *fraction* or in *pixels. Use `len` to set the value."
      },
      "len": {
       "valType": "number",
       "min": 0,
       "dflt": 1,
       "role": "style",
       "description": "Sets the length of the slider This measure excludes the padding of both ends. That is, the slider's length is this length minus the padding on both ends."
      },
      "x": {
       "valType": "number",
       "min": -2,
       "max": 3,
       "dflt": 0,
       "role": "style",
       "description": "Sets the x position (in normalized coordinates) of the slider."
      },
      "pad": {
       "t": {
        "valType": "number",
        "dflt": 20,
        "role": "style",
        "description": "The amount of padding (in px) along the top of the component."
       },
       "r": {
        "valType": "number",
        "dflt": 0,
        "role": "style",
        "description": "The amount of padding (in px) on the right side of the component."
       },
       "b": {
        "valType": "number",
        "dflt": 0,
        "role": "style",
        "description": "The amount of padding (in px) along the bottom of the component."
       },
       "l": {
        "valType": "number",
        "dflt": 0,
        "role": "style",
        "description": "The amount of padding (in px) on the left side of the component."
       },
       "description": "Set the padding of the slider component along each side.",
       "role": "object"
      },
      "xanchor": {
       "valType": "enumerated",
       "values": [
        "auto",
        "left",
        "center",
        "right"
       ],
       "dflt": "left",
       "role": "info",
       "description": "Sets the slider's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector."
      },
      "y": {
       "valType": "number",
       "min": -2,
       "max": 3,
       "dflt": 0,
       "role": "style",
       "description": "Sets the y position (in normalized coordinates) of the slider."
      },
      "yanchor": {
       "valType": "enumerated",
       "values": [
        "auto",
        "top",
        "middle",
        "bottom"
       ],
       "dflt": "top",
       "role": "info",
       "description": "Sets the slider's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector."
      },
      "transition": {
       "duration": {
        "valType": "number",
        "role": "info",
        "min": 0,
        "dflt": 150,
        "description": "Sets the duration of the slider transition"
       },
       "easing": {
        "valType": "enumerated",
        "values": [
         "linear",
         "quad",
         "cubic",
         "sin",
         "exp",
         "circle",
         "elastic",
         "back",
         "bounce",
         "linear-in",
         "quad-in",
         "cubic-in",
         "sin-in",
         "exp-in",
         "circle-in",
         "elastic-in",
         "back-in",
         "bounce-in",
         "linear-out",
         "quad-out",
         "cubic-out",
         "sin-out",
         "exp-out",
         "circle-out",
         "elastic-out",
         "back-out",
         "bounce-out",
         "linear-in-out",
         "quad-in-out",
         "cubic-in-out",
         "sin-in-out",
         "exp-in-out",
         "circle-in-out",
         "elastic-in-out",
         "back-in-out",
         "bounce-in-out"
        ],
        "role": "info",
        "dflt": "cubic-in-out",
        "description": "Sets the easing function of the slider transition"
       },
       "role": "object"
      },
      "currentvalue": {
       "visible": {
        "valType": "boolean",
        "role": "info",
        "dflt": true,
        "description": "Shows the currently-selected value above the slider."
       },
       "xanchor": {
        "valType": "enumerated",
        "values": [
         "left",
         "center",
         "right"
        ],
        "dflt": "left",
        "role": "info",
        "description": "The alignment of the value readout relative to the length of the slider."
       },
       "offset": {
        "valType": "number",
        "dflt": 10,
        "role": "info",
        "description": "The amount of space, in pixels, between the current value label and the slider."
       },
       "prefix": {
        "valType": "string",
        "role": "info",
        "description": "When currentvalue.visible is true, this sets the prefix of the label."
       },
       "suffix": {
        "valType": "string",
        "role": "info",
        "description": "When currentvalue.visible is true, this sets the suffix of the label."
       },
       "font": {
        "family": {
         "valType": "string",
         "role": "style",
         "noBlank": true,
         "strict": true,
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
        },
        "size": {
         "valType": "number",
         "role": "style",
         "min": 1
        },
        "color": {
         "valType": "color",
         "role": "style"
        },
        "description": "Sets the font of the current value label text.",
        "role": "object"
       },
       "role": "object"
      },
      "font": {
       "family": {
        "valType": "string",
        "role": "style",
        "noBlank": true,
        "strict": true,
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
       },
       "size": {
        "valType": "number",
        "role": "style",
        "min": 1
       },
       "color": {
        "valType": "color",
        "role": "style"
       },
       "description": "Sets the font of the slider step labels.",
       "role": "object"
      },
      "activebgcolor": {
       "valType": "color",
       "role": "style",
       "dflt": "#dbdde0",
       "description": "Sets the background color of the slider grip while dragging."
      },
      "bgcolor": {
       "valType": "color",
       "role": "style",
       "dflt": "#f8fafc",
       "description": "Sets the background color of the slider."
      },
      "bordercolor": {
       "valType": "color",
       "dflt": "#bec8d9",
       "role": "style",
       "description": "Sets the color of the border enclosing the slider."
      },
      "borderwidth": {
       "valType": "number",
       "min": 0,
       "dflt": 1,
       "role": "style",
       "description": "Sets the width (in px) of the border enclosing the slider."
      },
      "ticklen": {
       "valType": "number",
       "min": 0,
       "dflt": 7,
       "role": "style",
       "description": "Sets the length in pixels of step tick marks"
      },
      "tickcolor": {
       "valType": "color",
       "dflt": "#333",
       "role": "style",
       "description": "Sets the color of the border enclosing the slider."
      },
      "tickwidth": {
       "valType": "number",
       "min": 0,
       "dflt": 1,
       "role": "style",
       "description": "Sets the tick width (in px)."
      },
      "minorticklen": {
       "valType": "number",
       "min": 0,
       "dflt": 4,
       "role": "style",
       "description": "Sets the length in pixels of minor step tick marks"
      },
      "role": "object"
     }
    },
    "role": "object"
   },
   "calendar": {
    "valType": "enumerated",
    "values": [
     "gregorian",
     "chinese",
     "coptic",
     "discworld",
     "ethiopian",
     "hebrew",
     "islamic",
     "julian",
     "mayan",
     "nanakshahi",
     "nepali",
     "persian",
     "jalali",
     "taiwan",
     "thai",
     "ummalqura"
    ],
    "role": "info",
    "dflt": "gregorian",
    "description": "Sets the default calendar system to use for interpreting and displaying dates throughout the plot."
   }
  }
 },
 
}